-- MySQL dump 10.13  Distrib 8.0.34, for Win64 (x86_64)
--
-- Host: localhost    Database: quizdb
-- ------------------------------------------------------
-- Server version	8.0.34

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8mb4 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `__efmigrationshistory`
--

DROP TABLE IF EXISTS `__efmigrationshistory`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `__efmigrationshistory` (
  `MigrationId` varchar(150) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `ProductVersion` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  PRIMARY KEY (`MigrationId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `__efmigrationshistory`
--

LOCK TABLES `__efmigrationshistory` WRITE;
/*!40000 ALTER TABLE `__efmigrationshistory` DISABLE KEYS */;
/*!40000 ALTER TABLE `__efmigrationshistory` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `category`
--

DROP TABLE IF EXISTS `category`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `category` (
  `category_id` int NOT NULL AUTO_INCREMENT,
  `category_name` varchar(255) NOT NULL,
  `category_is_active` tinyint(1) NOT NULL DEFAULT '1',
  PRIMARY KEY (`category_id`),
  UNIQUE KEY `category_name` (`category_name`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `category`
--

LOCK TABLES `category` WRITE;
/*!40000 ALTER TABLE `category` DISABLE KEYS */;
INSERT INTO `category` VALUES (1,'Pro',0),(2,'programmation',1);
/*!40000 ALTER TABLE `category` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `category_quiz`
--

DROP TABLE IF EXISTS `category_quiz`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `category_quiz` (
  `category_quiz_id` int NOT NULL AUTO_INCREMENT,
  `category_id` int DEFAULT NULL,
  `quiz_id` int DEFAULT NULL,
  PRIMARY KEY (`category_quiz_id`),
  KEY `category_id` (`category_id`),
  KEY `quiz_id` (`quiz_id`),
  CONSTRAINT `category_quiz_ibfk_1` FOREIGN KEY (`category_id`) REFERENCES `category` (`category_id`),
  CONSTRAINT `category_quiz_ibfk_2` FOREIGN KEY (`quiz_id`) REFERENCES `quiz` (`quiz_id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `category_quiz`
--

LOCK TABLES `category_quiz` WRITE;
/*!40000 ALTER TABLE `category_quiz` DISABLE KEYS */;
INSERT INTO `category_quiz` VALUES (1,2,2),(2,2,3),(3,2,4);
/*!40000 ALTER TABLE `category_quiz` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `multiplayer_quiz`
--

DROP TABLE IF EXISTS `multiplayer_quiz`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `multiplayer_quiz` (
  `id` int NOT NULL AUTO_INCREMENT,
  `quiz_id` int NOT NULL,
  `begin_date` datetime NOT NULL,
  `end_date` datetime NOT NULL,
  `qr_link` varchar(255) DEFAULT NULL,
  `site_link` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `fk_quiz_id` (`quiz_id`),
  CONSTRAINT `multiplayer_quiz_fk_1` FOREIGN KEY (`quiz_id`) REFERENCES `quiz` (`quiz_id`) ON DELETE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `multiplayer_quiz`
--

LOCK TABLES `multiplayer_quiz` WRITE;
/*!40000 ALTER TABLE `multiplayer_quiz` DISABLE KEYS */;
INSERT INTO `multiplayer_quiz` VALUES (1,1,'2024-04-01 09:00:00','2024-04-02 18:00:00','http://example.com/quiz1','http://example.com/site1'),(2,2,'2024-04-05 10:00:00','2024-04-06 20:00:00','http://example.com/quiz2','http://example.com/site2'),(3,3,'2024-04-10 08:00:00','2024-04-12 16:00:00','http://example.com/quiz3','http://example.com/site3');
/*!40000 ALTER TABLE `multiplayer_quiz` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `multiusersession`
--

DROP TABLE IF EXISTS `multiusersession`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `multiusersession` (
  `session_id` int NOT NULL AUTO_INCREMENT,
  `username` varchar(50) DEFAULT NULL,
  `start_time` datetime DEFAULT NULL,
  `end_time` datetime DEFAULT NULL,
  PRIMARY KEY (`session_id`)
) ENGINE=InnoDB AUTO_INCREMENT=21 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `multiusersession`
--

LOCK TABLES `multiusersession` WRITE;
/*!40000 ALTER TABLE `multiusersession` DISABLE KEYS */;
INSERT INTO `multiusersession` VALUES (20,'murielleflora','2024-03-21 00:22:22',NULL);
/*!40000 ALTER TABLE `multiusersession` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `option`
--

DROP TABLE IF EXISTS `option`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `option` (
  `option_id` int NOT NULL AUTO_INCREMENT,
  `option_text` text NOT NULL,
  `option_is_correct` tinyint(1) NOT NULL,
  PRIMARY KEY (`option_id`)
) ENGINE=InnoDB AUTO_INCREMENT=563 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `option`
--

LOCK TABLES `option` WRITE;
/*!40000 ALTER TABLE `option` DISABLE KEYS */;
INSERT INTO `option` VALUES (1,'Un paradigme de programmation',1),(2,'Un langage de programmation',0),(3,' est un framework qui permet le developpement des applications au complet',0),(4,'Une structure de données  permettant de regroupe les données  et leur traitement',1),(5,'La suppression automatique des objets inutilisés pour libérer la mémoire.',1),(6,' La gestion des erreurs liées à la mémoire.',0),(7,'defini une relation est \"compose de \" en representant le lien d’appartenance entre deux classes',0),(8,'définit la relation \"has a\" et représente un lien distant entre deux classes',1),(9,'TRUE',1),(10,'FALSE',0),(11,'TRUE',1),(12,'FALSE',0),(13,'D\'initialiser les proprietes d\'un objet lors de sa creation',1),(14,'D\'indexer les differentes valeurs contenu dans un tableau',0),(15,'Créer une copie exacte d\'une classe parente',0),(16,'Partager les propriétés et le méthodes d\'une classe parente',1),(17,'Faire heriter des proprietes d\'une classe parente a des classes enfants',0),(18,'Cacher l\'implementation interne d\'un objet',1),(19,'Abstration',0),(20,'Polymorphisme',0),(21,'principe de service',1),(22,'Encapsulation',0),(23,'Permet de creer des composante de jeux de realite virtuelle et augmente',0),(24,'Specifie qu\'une fonction est une redefinition de celle implemente dans la classe mere',0),(25,'Employe pour creer des fonctions virtuelles qui permet de redefinir les fonctions de la superclasse dans les classes derrivees',1),(26,'garantit que la fonction sera automatiquement appele dans toutes les instances de la classe de la base, et ce, meme si elle n\'est pas explicitement invoquee dans le code',0),(27,'Est une methode technique permettant d\'installer les pluggin et dependances utiliser pour implemmenter la POO',0),(28,'Est  un moyen permettant d\'eviter les classes constantes',0),(29,'Est un type de fonction qui ne peut pas etre redefini dans',0),(30,'Est ce qui permet d\'appeller une fonction ou un attribut sans avoir a ce soucier de son type intrinseque',1),(31,'abstration',1),(32,'Polymorphisme statique.',0),(33,' Polymorphisme d\'héritage.',0),(34,'Polymorphisme de surcharge.',0),(35,'le fait d\'analyser un programme de facon holistque, en s\'interssant a tout aspect de la specification et de l\'implementation',0),(36,'une representation bien defini defini de la construction d\'une entite concrete ou conceptuelle.',0),(37,'ce qui permet de mettre l\'importance sur ce que fait un objet sans pour autant savoir savoir sa composition, ses details, ses specifications et son implementation',1),(38,'le fait de restreindre l\'acces a des attributs d\'un objet  et de ne permetre l\'acces qu\'a travers les methodes specifiques (acesseurs get/ set) …',0),(39,'protected',0),(40,'public',0),(41,'unavailable',1),(42,'private',0),(43,'Le constructeur par copie crée une nouvelle instance en utilisant les valeurs d\'une instance existante, tandis que le constructeur par déplacement transfère la propriété de la ressource d\'une instance à une autre.',1),(44,'Les constructeurs par copie et par déplacement sont interchangeables et font la même chose.',0),(45,'Le constructeur par copie et par déplacement sont des concepts obsolètes en POO.',0),(46,' Le constructeur par déplacement crée une nouvelle instance en utilisant les valeurs d\'une instance existante, tandis que le constructeur par copie transfère la propriété de la ressource d\'une instance à une autre.',0),(47,'Une classe abstraite peut avoir des membres statiques, tandis qu\'une interface ne le peut pas.',0),(48,' Une classe abstraite peut être instanciée, tandis qu\'une interface ne le peut pas.',0),(49,'Le constructeur par copie et par déplacement sont des concepts obsolètes en POO.',0),(50,' Une interface peut avoir des méthodes avec une implémentation par défaut, tandis qu\'une classe abstraite ne le peut pas.',1),(51,'La résolution des appels de méthodes pendant l\'exécution.',0),(52,'La possibilité d\'avoir plusieurs méthodes avec le même nom dans une classe.',0),(53,'La liaison des méthodes lors de la compilation.',1),(54,'La capacité d\'une classe à hériter de plusieurs interfaces.',0),(55,'En rendant tous les membres de la classe privés.',0),(56,'En utilisant le mot-clé \"final\" devant la déclaration de classe.',0),(57,'En utilisant des méthodes statiques.',0),(58,'En déclarant la classe comme \"sealed\" (scellée).',1),(59,'Une faible dépendance entre deux classes.',0),(60,'Une forte dépendance entre deux classes.',1),(61,'La capacité de changer une classe sans affecter les autres classes du système.',0),(62,'La résistance aux changements dans une classe.',0),(63,'L\'utilisation intensive de l\'héritage multiple.',0),(64,'Une méthode qui ne peut pas être modifiée une fois qu\'elle a été définie dans une classe.',0),(65,'Une méthode qui utilise des modèles pour générer du code lors de la compilation',0),(66,'Une méthode qui n\'a pas de signature définie.',0),(67,'Une méthode qui doit être implémentée dans chaque sous-classe.',0),(68,'Une méthode qui fournit une structure générale dans une classe, mais permet aux sous-classes de redéfinir certains comportements',1),(69,'L\'héritage d\'une classe à partir de plusieurs classes parentes.',0),(70,'La création d\'objets en utilisant la copie d\'autres objets.',0),(71,'L\'inclusion d\'objets d\'une classe dans une autre classe pour réutiliser le code.',1),(72,'La création de classes avec des méthodes statiques uniquement.',0),(73,'L\'utilisation de classes abstraites pour définir des comportements.',0),(74,'Les objets doivent avoir le contrôle total sur leur propre fonctionnement.',0),(75,'Les composants d\'une application sont découplés et la configuration est gérée par un conteneur externe.',1),(76,'Les dépendances entre objets sont gérées manuellement par le développeur.',0),(77,'Les objets ne devraient pas dépendre d\'abstractions, mais plutôt de détails concrets.',0),(78,'L\'inversion du contrôle n\'est pas un concept applicable en programmation orientée objet.',0),(79,'La possibilité d\'ajouter des fonctionnalités aux opérateurs standard pour les types définis par l\'utilisateur.',1),(80,'La création de fonctions qui peuvent accepter un nombre variable d\'arguments.',0),(81,'L\'utilisation d\'opérateurs pour augmenter la complexité du code.',0),(82,'L\'interdiction d\'utiliser des opérateurs standard sur des types personnalisés.',0),(83,'L\'extension de la durée de vie d\'un objet.',0),(84,'Une classe dont les instances peuvent être modifiées à tout moment.',0),(85,'Une classe qui ne peut pas être héritée par d\'autres classes.',0),(86,'Une classe dont les membres ne peuvent pas être modifiés après leur initialisation.',1),(87,'Une classe qui ne peut pas être instanciée.',0),(88,'Une classe qui utilise intensivement l\'héritage multiple.',0),(89,'L\'utilisation de plusieurs méthodes avec le même nom dans une classe.',0),(90,'La création de méthodes qui peuvent être appelées de manière séquentielle sur un objet, en utilisant le résultat de chaque appel comme cible pour le prochain appel.',1),(91,'La création d\'une classe avec une seule méthode.',0),(92,'L\'utilisation d\'opérateurs pour chaîner des opérations sur des objets.',0),(93,'L\'utilisation intensive d\'interfaces.',0),(94,'La conversion d\'objets en une séquence de bytes pour faciliter le stockage ou la transmission.',1),(95,'L\'utilisation d\'opérateurs pour séparer des chaînes de caractères en sous-chaînes.',0),(96,'La création de classes séparées pour chaque sous-composant d\'un système.',0),(97,'La modification de la structure interne d\'un objet pendant son cycle de vie.',0),(98,'L\'interdiction de l\'utilisation de classes sérialisables.',0),(99,'Assure une seule instance d\'une classe avec un accès global.',1),(100,'Organise des objets en structures arborescentes.',0),(101,'Observateur',0),(102,'Strategie',1),(103,'Design Pattern d\'Observateur',1),(104,'Design Pattern de Décorateur',0),(105,'Décorateur',0),(106,'Composite',1),(107,'Prototype',1),(108,'Builder',0),(109,'Observateur',1),(110,'Commande',0),(111,'Memento',0),(112,'Commande',1),(113,'Adapteur',0),(114,'Stratégie',1),(115,'Un paradigme de programmation',1),(116,'Un langage de programmation',0),(117,'Composite',0),(118,'Décorateur',1),(119,' est un framework qui permet le developpement des applications au complet',0),(120,'Une structure de données  permettant de regroupe les données  et leur traitement',1),(121,'La suppression automatique des objets inutilisés pour libérer la mémoire.',1),(122,' La gestion des erreurs liées à la mémoire.',0),(123,'Le design pattern Strategy encapsule une famille d\'algorithmes interchangeables, tandis que le design pattern State encapsule le comportement d\'un objet à différents états.',0),(124,'Le design pattern State utilise la composition, tandis que le design pattern Strategy utilise l\'héritage.',0),(125,'Le design pattern State permet à un objet de modifier son comportement lorsque son état interne change, tandis que le design pattern Strategy permet au client de choisir dynamiquement l\'algorithme à utiliser.',1),(126,'Le design pattern Strategy permet de définir une dépendance d\'un-à-plusieurs entre objets, tandis que le design pattern State permet d\'ajouter de nouvelles responsabilités à un objet de manière souple.',0),(127,'defini une relation est \"compose de \" en representant le lien d’appartenance entre deux classes',0),(128,'définit la relation \"has a\" et représente un lien distant entre deux classes',1),(129,'Chaque état est une classe concrète implémentant une interface commune.',1),(130,'Chaque état est une classe abstraite héritant d\'une classe commune.',0),(131,'Chaque état est un objet unique partageant une interface commune.',0),(132,'Chaque état est une interface définissant les méthodes nécessaires.',0),(133,'TRUE',1),(134,'FALSE',0),(135,'En utilisant des classes abstraites pour définir une interface commune.',0),(136,'En utilisant l\'agrégation plutôt que l\'héritage.',0),(137,'En utilisant le design pattern Composite.',0),(138,'En définissant un algorithme dans une classe mère, avec certaines étapes pouvant être redéfinies par les classes filles.',1),(139,'TRUE',1),(140,'FALSE',0),(141,'Une méthode concrète doit être implémentée par les classes filles, tandis qu\'une méthode abstraite est déjà implémentée dans la classe mère.',0),(142,'Une méthode concrète est appelée dans le Template Method, tandis qu\'une méthode abstraite doit être redéfinie par les classes filles.',0),(143,'Une méthode concrète est spécifiée dans l\'interface, tandis qu\'une méthode abstraite est définie dans la classe mère.',0),(144,'Une méthode concrète est définie dans la classe mère, tandis qu\'une méthode abstraite doit être redéfinie par les classes filles.',1),(145,'D\'initialiser les proprietes d\'un objet lors de sa creation',1),(146,'D\'indexer les differentes valeurs contenu dans un tableau',0),(147,'Le design pattern Facade agit comme une interface unifiée, tandis que le design pattern Adapter permet à des interfaces incompatibles de travailler ensemble.',1),(148,'Le design pattern Facade utilise l\'héritage, tandis que le design pattern Adapter utilise la composition.',0),(149,'Le design pattern Facade simplifie une interface existante, tandis que le design pattern Adapter rend une interface incompatible compatible.',0),(150,'Le design pattern Facade encapsule une famille d\'algorithmes interchangeables, tandis que le design pattern Adapter offre une interface unifiée pour un ensemble d\'interfaces.',0),(151,'Créer une copie exacte d\'une classe parente',0),(152,'Partager les propriétés et le méthodes d\'une classe parente',1),(153,'En utilisant des classes finales.',0),(154,'En fournissant une interface unifiée pour un ensemble d\'interfaces, isolant ainsi le client de la complexité du sous-système.',1),(155,'En utilisant le design pattern Observer.',0),(156,'En rendant toutes les méthodes publiques.',0),(157,'Faire heriter des proprietes d\'une classe parente a des classes enfants',0),(158,'Cacher l\'implementation interne d\'un objet',1),(159,'En utilisant l\'héritage.',0),(160,'En agrégeant toutes les classes du sous-système et en exposant une interface simplifiée.',0),(161,'En utilisant une interface commune pour toutes les classes du sous-système.',1),(162,'En utilisant le design pattern Singleton.',0),(163,'Abstration',0),(164,'Polymorphisme',0),(165,'principe de service',1),(166,'Encapsulation',0),(167,'Le Bridge permet abstraction et implémentation indépendantes, tandis que le Flyweight réduit la duplication en partageant des objets pour économiser la mémoire.',1),(168,'Le design pattern Bridge utilise la composition, tandis que le design pattern Flyweight utilise l\'héritage.',0),(169,'Le Bridge simplifie l\'accès à un sous-système complexe, tandis que le Flyweight optimise les performances en partageant des objets similaires.',0),(170,'Le design pattern Bridge utilise le design pattern Composite, tandis que le design pattern Flyweight utilise le design pattern Strategy.',0),(171,'Permet de creer des composante de jeux de realite virtuelle et augmente',0),(172,'Specifie qu\'une fonction est une redefinition de celle implemente dans la classe mere',0),(173,'Employe pour creer des fonctions virtuelles qui permet de redefinir les fonctions de la superclasse dans les classes derrivees',1),(174,'garantit que la fonction sera automatiquement appele dans toutes les instances de la classe de la base, et ce, meme si elle n\'est pas explicitement invoquee dans le code',0),(175,'Est une methode technique permettant d\'installer les pluggin et dependances utiliser pour implemmenter la POO',0),(176,'Est  un moyen permettant d\'eviter les classes constantes',0),(177,'Est un type de fonction qui ne peut pas etre redefini dans',0),(178,'Est ce qui permet d\'appeller une fonction ou un attribut sans avoir a ce soucier de son type intrinseque',1),(179,'Faciliter la communication entre les objets d\'un système.',1),(180,' Structurer les données de manière efficace.',0),(181,'Contrôler l\'accès aux objets d\'une classe.',0),(182,' Gérer les exceptions au sein d\'un programme.',0),(183,'abstration',1),(184,'Polymorphisme statique.',0),(185,' Polymorphisme d\'héritage.',0),(186,'Polymorphisme de surcharge.',0),(187,'Créer des instances d\'objets sans spécifier leur type.',0),(188,'Construire des objets étape par étape, en séparant le processus de construction de la représentation finale.',1),(189,'Gérer la communication entre objets complexes.',0),(190,'Faciliter la création de classes dérivées.',0),(191,'le fait d\'analyser un programme de facon holistque, en s\'interssant a tout aspect de la specification et de l\'implementation',0),(192,'une representation bien defini defini de la construction d\'une entite concrete ou conceptuelle.',0),(193,'ce qui permet de mettre l\'importance sur ce que fait un objet sans pour autant savoir savoir sa composition, ses details, ses specifications et son implementation',1),(194,'le fait de restreindre l\'acces a des attributs d\'un objet  et de ne permetre l\'acces qu\'a travers les methodes specifiques (acesseurs get/ set) …',0),(195,'Observer implémente un mécanisme de commande pour encapsuler les requêtes.',0),(196,'Observer utilise la délégation pour permettre l\'interchangeabilité des algorithmes.',0),(197,'Observer permet la communication bidirectionnelle entre sujets et observateurs.',1),(198,'Observer utilise des états pour modifier le comportement d\'un objet.',0),(199,'Observer utilise un modèle de création pour instancier des objets.',0),(200,'protected',0),(201,'public',0),(202,'unavailable',1),(203,'private',0),(204,'L\'objet Singleton peut être difficile à déboguer.',0),(205,'L\'objet Singleton peut être difficile à tester.',0),(206,'L\'objet Singleton peut être difficile à maintenir.',0),(207,'L\'objet Singleton peut devenir un point de défaillance unique.',1),(208,'L\'objet Singleton peut être difficile à mettre à l\'échelle.',0),(209,'Le constructeur par copie crée une nouvelle instance en utilisant les valeurs d\'une instance existante, tandis que le constructeur par déplacement transfère la propriété de la ressource d\'une instance à une autre.',1),(210,'Les constructeurs par copie et par déplacement sont interchangeables et font la même chose.',0),(211,'Le constructeur par copie et par déplacement sont des concepts obsolètes en POO.',0),(212,' Le constructeur par déplacement crée une nouvelle instance en utilisant les valeurs d\'une instance existante, tandis que le constructeur par copie transfère la propriété de la ressource d\'une instance à une autre.',0),(213,'Une classe abstraite peut avoir des membres statiques, tandis qu\'une interface ne le peut pas.',0),(214,' Une classe abstraite peut être instanciée, tandis qu\'une interface ne le peut pas.',0),(215,'Le constructeur par copie et par déplacement sont des concepts obsolètes en POO.',0),(216,' Une interface peut avoir des méthodes avec une implémentation par défaut, tandis qu\'une classe abstraite ne le peut pas.',1),(217,'Observer Pattern',0),(218,'Factory Method Pattern',0),(219,'Memento Pattern',1),(220,'Composite Pattern',0),(221,'Chain of Responsibility Pattern',0),(222,'La résolution des appels de méthodes pendant l\'exécution.',0),(223,'La possibilité d\'avoir plusieurs méthodes avec le même nom dans une classe.',0),(224,'La liaison des méthodes lors de la compilation.',1),(225,'La capacité d\'une classe à hériter de plusieurs interfaces.',0),(226,'\"Clean Code: A Handbook of Agile Software Craftsmanship\"',0),(227,'\"Refactoring: Improving the Design of Existing Code\"',0),(228,'\"Domain-Driven Design: Tackling Complexity in the Heart of Software\"',0),(229,'Design Patterns: Elements of Reusable Object-Oriented Software\"',1),(230,'\"Effective Java\"',0),(231,'En rendant tous les membres de la classe privés.',0),(232,'En utilisant le mot-clé \"final\" devant la déclaration de classe.',0),(233,'En utilisant des méthodes statiques.',0),(234,'En déclarant la classe comme \"sealed\" (scellée).',1),(235,'Un paradigme de programmation axé sur la séquentialité des instructions.',1),(236,'Une faible dépendance entre deux classes.',0),(237,'Une forte dépendance entre deux classes.',1),(238,'La capacité de changer une classe sans affecter les autres classes du système.',0),(239,'La résistance aux changements dans une classe.',0),(240,'L\'utilisation intensive de l\'héritage multiple.',0),(241,'Un modèle de programmation basé sur la gestion des événements déclenchés par des interactions utilisateur ou d\'autres sources.',0),(242,'Une méthode qui ne peut pas être modifiée une fois qu\'elle a été définie dans une classe.',0),(243,'Une méthode qui utilise des modèles pour générer du code lors de la compilation',0),(244,'Une méthode qui n\'a pas de signature définie.',0),(245,'Une méthode qui doit être implémentée dans chaque sous-classe.',0),(246,'Une méthode qui fournit une structure générale dans une classe, mais permet aux sous-classes de redéfinir certains comportements',1),(247,'TRUE',0),(248,'FALSE',1),(249,'L\'héritage d\'une classe à partir de plusieurs classes parentes.',0),(250,'La création d\'objets en utilisant la copie d\'autres objets.',0),(251,'L\'inclusion d\'objets d\'une classe dans une autre classe pour réutiliser le code.',1),(252,'La création de classes avec des méthodes statiques uniquement.',0),(253,'L\'utilisation de classes abstraites pour définir des comportements.',0),(254,'Clavier',0),(255,'Souris',1),(256,'Les objets doivent avoir le contrôle total sur leur propre fonctionnement.',0),(257,'Les composants d\'une application sont découplés et la configuration est gérée par un conteneur externe.',1),(258,'Les dépendances entre objets sont gérées manuellement par le développeur.',0),(259,'Les objets ne devraient pas dépendre d\'abstractions, mais plutôt de détails concrets.',0),(260,'L\'inversion du contrôle n\'est pas un concept applicable en programmation orientée objet.',0),(261,'La possibilité d\'ajouter des fonctionnalités aux opérateurs standard pour les types définis par l\'utilisateur.',1),(262,'La création de fonctions qui peuvent accepter un nombre variable d\'arguments.',0),(263,'L\'utilisation d\'opérateurs pour augmenter la complexité du code.',0),(264,'L\'interdiction d\'utiliser des opérateurs standard sur des types personnalisés.',0),(265,'L\'extension de la durée de vie d\'un objet.',0),(266,'Gérer la réponse à l\'événement',1),(267,'Définir l\'événement  ',0),(268,'Une classe dont les instances peuvent être modifiées à tout moment.',0),(269,'Une classe qui ne peut pas être héritée par d\'autres classes.',0),(270,'Une classe dont les membres ne peuvent pas être modifiés après leur initialisation.',1),(271,'Une classe qui ne peut pas être instanciée.',0),(272,'Une classe qui utilise intensivement l\'héritage multiple.',0),(273,'Les fonctions',1),(274,'Les erreurs',0),(275,'L\'utilisation de plusieurs méthodes avec le même nom dans une classe.',0),(276,'La création de méthodes qui peuvent être appelées de manière séquentielle sur un objet, en utilisant le résultat de chaque appel comme cible pour le prochain appel.',1),(277,'La création d\'une classe avec une seule méthode.',0),(278,'L\'utilisation d\'opérateurs pour chaîner des opérations sur des objets.',0),(279,'L\'utilisation intensive d\'interfaces.',0),(280,'document.getElementByID(\"btnClick\").onEvent = function() {...}',0),(281,' document.getElementById(\"btnClick\").addEventListener(\"click\", function() {...})',1),(282,'La conversion d\'objets en une séquence de bytes pour faciliter le stockage ou la transmission.',1),(283,'L\'utilisation d\'opérateurs pour séparer des chaînes de caractères en sous-chaînes.',0),(284,'La création de classes séparées pour chaque sous-composant d\'un système.',0),(285,'La modification de la structure interne d\'un objet pendant son cycle de vie.',0),(286,'L\'interdiction de l\'utilisation de classes sérialisables.',0),(287,'Assure une seule instance d\'une classe avec un accès global.',1),(288,'Organise des objets en structures arborescentes.',0),(289,'Un objet qui génère des événements',1),(290,'Un gestionnaire d\'événements',0),(291,'Observateur',0),(292,'Strategie',1),(293,'Bubbling',0),(294,'Capturing',1),(295,'Design Pattern d\'Observateur',1),(296,'Design Pattern de Décorateur',0),(297,'Un événement généré par l\'utilisateur',0),(298,'Un événement généré par le navigateur',1),(299,'Décorateur',0),(300,'Composite',1),(301,'preventDefault()',0),(302,'stopPropagation()',1),(303,'Prototype',1),(304,'Builder',0),(305,'event.listen()',0),(306,'addEventListener()',0),(307,'attachEvent()',0),(308,'on()',1),(309,'Observateur',1),(310,'Commande',0),(311,'Manipuler la base de données',0),(312,'Gérer les interactions utilisateur',1),(313,'Contrôler le flux d\'exécution',0),(314,'Gérer la connectivité réseau',0),(315,'Memento',0),(316,'Commande',1),(317,'event.stop()',0),(318,'event.halt()',0),(319,'event.preventDefault()',1),(320,'event.cancel()',0),(321,'Adapteur',0),(322,'Stratégie',1),(323,'La propagation des événements du parent vers l\'enfant',1),(324,'La propagation des événements de l\'enfant vers le parent',0),(325,'L\'arrêt de la propagation des événements',0),(326,'La réplication des événements',0),(327,'Composite',0),(328,'Décorateur',1),(329,'ButtonEvent',0),(330,'ActionEvent',1),(331,'ButtonListener',0),(332,'ClickListener',0),(333,'Le design pattern Strategy encapsule une famille d\'algorithmes interchangeables, tandis que le design pattern State encapsule le comportement d\'un objet à différents états.',0),(334,'Le design pattern State utilise la composition, tandis que le design pattern Strategy utilise l\'héritage.',0),(335,'Le design pattern State permet à un objet de modifier son comportement lorsque son état interne change, tandis que le design pattern Strategy permet au client de choisir dynamiquement l\'algorithme à utiliser.',1),(336,'Le design pattern Strategy permet de définir une dépendance d\'un-à-plusieurs entre objets, tandis que le design pattern State permet d\'ajouter de nouvelles responsabilités à un objet de manière souple.',0),(337,'removeEvent()',0),(338,'Chaque état est une classe concrète implémentant une interface commune.',1),(339,'Chaque état est une classe abstraite héritant d\'une classe commune.',0),(340,'unbind()',0),(341,'Chaque état est un objet unique partageant une interface commune.',0),(342,'removeEventListener()',1),(343,'Chaque état est une interface définissant les méthodes nécessaires.',0),(344,'detachEvent()',0),(345,'En utilisant des classes abstraites pour définir une interface commune.',0),(346,'En utilisant l\'agrégation plutôt que l\'héritage.',0),(347,'En utilisant le design pattern Composite.',0),(348,'En définissant un algorithme dans une classe mère, avec certaines étapes pouvant être redéfinies par les classes filles.',1),(349,'Modèle',0),(350,'Vue',0),(351,'Contrôleur',1),(352,'Middleware',0),(353,'Une méthode concrète doit être implémentée par les classes filles, tandis qu\'une méthode abstraite est déjà implémentée dans la classe mère.',0),(354,'Une méthode concrète est appelée dans le Template Method, tandis qu\'une méthode abstraite doit être redéfinie par les classes filles.',0),(355,'Une méthode concrète est spécifiée dans l\'interface, tandis qu\'une méthode abstraite est définie dans la classe mère.',0),(356,'Une méthode concrète est définie dans la classe mère, tandis qu\'une méthode abstraite doit être redéfinie par les classes filles.',1),(357,'triggerEvent()',0),(358,'emitEvent()',0),(359,'fireEvent()',0),(360,'dispatchEvent()',1),(361,'Le design pattern Facade agit comme une interface unifiée, tandis que le design pattern Adapter permet à des interfaces incompatibles de travailler ensemble.',1),(362,'Le design pattern Facade utilise l\'héritage, tandis que le design pattern Adapter utilise la composition.',0),(363,'Le design pattern Facade simplifie une interface existante, tandis que le design pattern Adapter rend une interface incompatible compatible.',0),(364,'Le design pattern Facade encapsule une famille d\'algorithmes interchangeables, tandis que le design pattern Adapter offre une interface unifiée pour un ensemble d\'interfaces.',0),(365,'Un modèle de programmation basé sur les événements',0),(366,' Une approche de gestion des erreurs',0),(367,'La synchronisation forcée des événements',0),(368,'L\'exécution simultanée de plusieurs tâches',1),(369,'En utilisant des classes finales.',0),(370,'En fournissant une interface unifiée pour un ensemble d\'interfaces, isolant ainsi le client de la complexité du sous-système.',1),(371,'En utilisant le design pattern Observer.',0),(372,'En rendant toutes les méthodes publiques.',0),(373,'animationEnd',1),(374,'En utilisant l\'héritage.',0),(375,'transitionEnd',0),(376,'animationFinish',0),(377,'En agrégeant toutes les classes du sous-système et en exposant une interface simplifiée.',0),(378,'animationComplete',0),(379,'En utilisant une interface commune pour toutes les classes du sous-système.',1),(380,'En utilisant le design pattern Singleton.',0),(381,'Le Bridge permet abstraction et implémentation indépendantes, tandis que le Flyweight réduit la duplication en partageant des objets pour économiser la mémoire.',1),(382,'Le design pattern Bridge utilise la composition, tandis que le design pattern Flyweight utilise l\'héritage.',0),(383,'Le Bridge simplifie l\'accès à un sous-système complexe, tandis que le Flyweight optimise les performances en partageant des objets similaires.',0),(384,'Le design pattern Bridge utilise le design pattern Composite, tandis que le design pattern Flyweight utilise le design pattern Strategy.',0),(385,'handleMouseClick()',0),(386,'addEventListener(\'click\', callback)',1),(387,'onMouseClick = function() {}',0),(388,'clickHandler()',0),(389,'registerEvent(\'mouseclick\', handler)',0),(390,'Faciliter la communication entre les objets d\'un système.',1),(391,' Structurer les données de manière efficace.',0),(392,'Contrôler l\'accès aux objets d\'une classe.',0),(393,' Gérer les exceptions au sein d\'un programme.',0),(394,'En utilisant le module events et en émettant des événements personnalisés.',1),(395,'En utilisant le module systemEvents intégré.',0),(396,'En attachant des callbacks aux processus système.',0),(397,'En utilisant la fonction handleSystemEvent().',0),(398,'Node.js ne prend pas en charge les événements système.',0),(399,'Créer des instances d\'objets sans spécifier leur type.',0),(400,'Construire des objets étape par étape, en séparant le processus de construction de la représentation finale.',1),(401,'Gérer la communication entre objets complexes.',0),(402,'Faciliter la création de classes dérivées.',0),(403,'L\'ordre dans lequel les gestionnaires d\'événements sont appelés.',1),(404,'Le type d\'événement capturé.',0),(405,'La durée pendant laquelle l\'événement est actif.',0),(406,'Les navigateurs modernes n\'utilisent plus la capture des événements.',0),(407,'Les deux sont identiques.',0),(408,'Observer implémente un mécanisme de commande pour encapsuler les requêtes.',0),(409,'Observer utilise la délégation pour permettre l\'interchangeabilité des algorithmes.',0),(410,'Observer permet la communication bidirectionnelle entre sujets et observateurs.',1),(411,'Observer utilise des états pour modifier le comportement d\'un objet.',0),(412,'Observer utilise un modèle de création pour instancier des objets.',0),(413,'setTimeout',0),(414,'setInterval',0),(415,'TimelineMax',0),(416,'Date',0),(417,'requestAnimationFrame',1),(418,'L\'objet Singleton peut être difficile à déboguer.',0),(419,'L\'objet Singleton peut être difficile à tester.',0),(420,'L\'objet Singleton peut être difficile à maintenir.',0),(421,'L\'objet Singleton peut devenir un point de défaillance unique.',1),(422,'L\'objet Singleton peut être difficile à mettre à l\'échelle.',0),(423,'event.preventBehavior()',0),(424,'event.stopPropagation()',0),(425,'event.stopDefault()',0),(426,'event.preventDefault()',1),(427,'event.cancelDefault()',0),(428,'Observer Pattern',0),(429,'Factory Method Pattern',0),(430,'Memento Pattern',1),(431,'Composite Pattern',0),(432,'Chain of Responsibility Pattern',0),(433,'L\'objet Event n\'est pas utilisé dans la programmation événementielle.',0),(434,'Il permet d\'attacher des gestionnaires d\'événements.',0),(435,' Il contient uniquement des informations sur le type d\'événement.',0),(436,'Il sert à déclencher des événements de manière programmée.',0),(437,'Il représente un événement spécifique et ses propriétés.',1),(438,'\"Clean Code: A Handbook of Agile Software Craftsmanship\"',0),(439,'\"Refactoring: Improving the Design of Existing Code\"',0),(440,'\"Domain-Driven Design: Tackling Complexity in the Heart of Software\"',0),(441,'Design Patterns: Elements of Reusable Object-Oriented Software\"',1),(442,'\"Effective Java\"',0),(443,'En évitant complètement la modification dynamique du DOM',0),(444,' En attachant manuellement des gestionnaires d\'événements à chaque nouvel élément ajouté.',0),(445,'En utilisant la délégation d\'événements et en attachant un gestionnaire à un ancêtre stable.',1),(446,'En utilisant uniquement des événements inline directement dans le HTML.',0),(447,'En reliant tous les éléments à un seul gestionnaire d\'événements global.',0),(448,'Un paradigme de programmation axé sur la séquentialité des instructions.',1),(449,'Un modèle de programmation basé sur la gestion des événements déclenchés par des interactions utilisateur ou d\'autres sources.',0),(450,'TRUE',0),(451,'Il se déclenche lorsque la page est complètement chargée, y compris tous les fichiers externes.',0),(452,'Il ne s\'agit pas d\'un événement standard en JavaScript.',0),(453,'Il se déclenche lorsque le DOM est prêt, mais avant le chargement complet des ressources.',1),(454,'Il se déclenche uniquement lorsqu\'un événement de clic se produit sur un élément DOM.',0),(455,'Il se déclenche lorsque l\'utilisateur commence à taper dans un champ de formulaire.',0),(456,'FALSE',1),(457,'e.stopPropagation() arrête la propagation de l\'événement vers les éléments parents, tandis que e.preventDefault() empêche le comportement par défaut de l\'événement.',1),(458,'Clavier',0),(459,' e.preventDefault() arrête la propagation de l\'événement, tandis que e.stopPropagation() empêche le comportement par défaut.',0),(460,'Les deux fonctions font la même chose et peuvent être utilisées de manière interchangeable.',0),(461,' e.stopPropagation() empêche le comportement par défaut, tandis que e.preventDefault() arrête la propagation de l\'événement.\\',0),(462,'Ces deux fonctions ne sont pas utilisées dans la gestion des événements en JavaScript.',0),(463,'Souris',1),(464,'Gérer la réponse à l\'événement',1),(465,'Définir l\'événement  ',0),(466,'Les fonctions',1),(467,'Les erreurs',0),(468,'document.getElementByID(\"btnClick\").onEvent = function() {...}',0),(469,' document.getElementById(\"btnClick\").addEventListener(\"click\", function() {...})',1),(470,'Un objet qui génère des événements',1),(471,'Un gestionnaire d\'événements',0),(472,'Bubbling',0),(473,'Capturing',1),(474,'Un événement généré par l\'utilisateur',0),(475,'Un événement généré par le navigateur',1),(476,'preventDefault()',0),(477,'stopPropagation()',1),(478,'event.listen()',0),(479,'addEventListener()',0),(480,'attachEvent()',0),(481,'on()',1),(482,'Manipuler la base de données',0),(483,'Gérer les interactions utilisateur',1),(484,'Contrôler le flux d\'exécution',0),(485,'Gérer la connectivité réseau',0),(486,'event.stop()',0),(487,'event.halt()',0),(488,'event.preventDefault()',1),(489,'event.cancel()',0),(490,'La propagation des événements du parent vers l\'enfant',1),(491,'La propagation des événements de l\'enfant vers le parent',0),(492,'L\'arrêt de la propagation des événements',0),(493,'La réplication des événements',0),(494,'ButtonEvent',0),(495,'ActionEvent',1),(496,'ButtonListener',0),(497,'ClickListener',0),(498,'removeEvent()',0),(499,'unbind()',0),(500,'removeEventListener()',1),(501,'detachEvent()',0),(502,'Modèle',0),(503,'Vue',0),(504,'Contrôleur',1),(505,'Middleware',0),(506,'triggerEvent()',0),(507,'emitEvent()',0),(508,'fireEvent()',0),(509,'dispatchEvent()',1),(510,'Un modèle de programmation basé sur les événements',0),(511,' Une approche de gestion des erreurs',0),(512,'La synchronisation forcée des événements',0),(513,'L\'exécution simultanée de plusieurs tâches',1),(514,'animationEnd',1),(515,'transitionEnd',0),(516,'animationFinish',0),(517,'animationComplete',0),(518,'handleMouseClick()',0),(519,'addEventListener(\'click\', callback)',1),(520,'onMouseClick = function() {}',0),(521,'clickHandler()',0),(522,'registerEvent(\'mouseclick\', handler)',0),(523,'En utilisant le module events et en émettant des événements personnalisés.',1),(524,'En utilisant le module systemEvents intégré.',0),(525,'En attachant des callbacks aux processus système.',0),(526,'En utilisant la fonction handleSystemEvent().',0),(527,'Node.js ne prend pas en charge les événements système.',0),(528,'L\'ordre dans lequel les gestionnaires d\'événements sont appelés.',1),(529,'Le type d\'événement capturé.',0),(530,'La durée pendant laquelle l\'événement est actif.',0),(531,'Les navigateurs modernes n\'utilisent plus la capture des événements.',0),(532,'Les deux sont identiques.',0),(533,'setTimeout',0),(534,'setInterval',0),(535,'TimelineMax',0),(536,'Date',0),(537,'requestAnimationFrame',1),(538,'event.preventBehavior()',0),(539,'event.stopPropagation()',0),(540,'event.stopDefault()',0),(541,'event.preventDefault()',1),(542,'event.cancelDefault()',0),(543,'L\'objet Event n\'est pas utilisé dans la programmation événementielle.',0),(544,'Il permet d\'attacher des gestionnaires d\'événements.',0),(545,' Il contient uniquement des informations sur le type d\'événement.',0),(546,'Il sert à déclencher des événements de manière programmée.',0),(547,'Il représente un événement spécifique et ses propriétés.',1),(548,'En évitant complètement la modification dynamique du DOM',0),(549,' En attachant manuellement des gestionnaires d\'événements à chaque nouvel élément ajouté.',0),(550,'En utilisant la délégation d\'événements et en attachant un gestionnaire à un ancêtre stable.',1),(551,'En utilisant uniquement des événements inline directement dans le HTML.',0),(552,'En reliant tous les éléments à un seul gestionnaire d\'événements global.',0),(553,'Il se déclenche lorsque la page est complètement chargée, y compris tous les fichiers externes.',0),(554,'Il ne s\'agit pas d\'un événement standard en JavaScript.',0),(555,'Il se déclenche lorsque le DOM est prêt, mais avant le chargement complet des ressources.',1),(556,'Il se déclenche uniquement lorsqu\'un événement de clic se produit sur un élément DOM.',0),(557,'Il se déclenche lorsque l\'utilisateur commence à taper dans un champ de formulaire.',0),(558,'e.stopPropagation() arrête la propagation de l\'événement vers les éléments parents, tandis que e.preventDefault() empêche le comportement par défaut de l\'événement.',1),(559,' e.preventDefault() arrête la propagation de l\'événement, tandis que e.stopPropagation() empêche le comportement par défaut.',0),(560,'Les deux fonctions font la même chose et peuvent être utilisées de manière interchangeable.',0),(561,' e.stopPropagation() empêche le comportement par défaut, tandis que e.preventDefault() arrête la propagation de l\'événement.\\',0),(562,'Ces deux fonctions ne sont pas utilisées dans la gestion des événements en JavaScript.',0);
/*!40000 ALTER TABLE `option` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `question`
--

DROP TABLE IF EXISTS `question`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `question` (
  `question_id` int NOT NULL AUTO_INCREMENT,
  `question_text` text NOT NULL,
  `question_feedback` text,
  `question_level` smallint NOT NULL,
  `question_is_active` tinyint(1) NOT NULL DEFAULT '1',
  PRIMARY KEY (`question_id`)
) ENGINE=InnoDB AUTO_INCREMENT=159 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `question`
--

LOCK TABLES `question` WRITE;
/*!40000 ALTER TABLE `question` DISABLE KEYS */;
INSERT INTO `question` VALUES (1,'La POO(Programmation Orientée  Objet) est','La programmation orientée objet (POO) est un paradigme de programmation.',1,1),(2,'Une classe en POO est:','En programmation orientée objet (POO), une classe est un modèle ou un plan pour créer des objets.',1,1),(3,'Le garbage collection en programmation orientée objet est','Le garbage collection en POO est un processus automatisé de gestion de la mémoire qui consiste à identifier et à supprimer automatiquement les objets qui ne sont plus référencés par le programme, libérant ainsi la mémoire occupée par ces objets',1,1),(4,'Le concept d\'agregation ','Une agrégation définit la relation \"has a\" et représente un lien distant entre deux classe ou les deux membres de la relation peuvent exister indépendamment l’un de l’autre.',1,1),(5,'La delagation consite a confier une partie du travail a une autre classe ou objet, au lieu de les assignes a une seule unite.','Au lieu d\'effectuer toutes les tâches par une seule classe, on \"délègue\" certaines tâches à un autre composant pour les accomplir',1,1),(6,'La generalisation est permet a des sous-classe de derriver et ainsi de finir des sous-classes plus spécifiques.','Une généralisation définit la relation \"est une sorte de\" (parfois \"prend la forme de\") et utilse l\'héritage comme mécanisme de partage.',1,1),(7,'Un constructeur permet','Un constructeur est une methode de meme nom que la classe, qui initialise un objet.',1,1),(8,'La principale caracteristique de l\'heritage ','l\'heritage est un principe de la POO qui permet de derriver les attributs, methodes d\'une classe(superclasse)  a une autre classe(classe derrivee)',1,1),(9,'L\'encapsulation est employer pour ','En POO l\'encapsulation sert a dissimuler les details d\'implementaion d\'un objet et de ne permetre l\'access qu\'a travers des methodes specifiques',1,1),(10,'Ce n\'est pas un des quatres principes de la Programmation Orrientee Objet','La programmation orientée objet (POO) a 4 principaux fondamentaux a savoir: l\'heritage, l\'encapsulation, le polymorphisme, Abstraction',2,1),(11,'Le  mot cle virtual en POO C++','Le mot cle virtual en C++ permet de cree des fonctions virtuelles,  methodes de la classe de base qui peuvent etre redefinir dans les classes derrivee afin  d\'y faire reference a un objet par un pointeur a la superclasse',2,1),(12,'Le polymorphisme en POO','Le Polymorphisme est le moyen permettan d\'eviter l\'utilisation des classes',2,1),(13,'Quel type de polymorphisme permet l\'utilisation de fonctions ou d\'opérateurs qui agissent de manière différente en fonction des types des arguments ?','Le polymorphisme ad hoc/overloading ou surchage de fonction: est une possbilite offerte par certain langage de programmation de definir des fonctions de meme nom mais qui se differentie par le nombre ou le type de parametre effectif',2,1),(14,'L\'abstraction se decrit comme','L\'abstraction est concept fondamentale de la POO qui fait reference a une simplification des systemes complexes en se concentrant sur les aspects pertinent en ignorant les details non-essentiels.',2,1),(15,'Il n\'est pas un specifateur d\'acces en programmation','En programmation il existre 3 specificateur d\'acces en programmation: public, private , protected',2,1),(16,'Quelle affirmation décrit correctement les spécificités des constructeurs par copie et par déplacement (move) en programmation orientée objet (POO)?','Le constructeur par copie crée une copie profonde d\'un objet en copiant les valeurs de ses attributs, tandis que le move constructeur transfère la propriété des ressources d\'un objet à un autre, évitant la copie coûteuse des données',2,1),(17,'Quelle est la différence entre une classe abstraite et une interface en Java?','Une classe abstraite peut avoir des méthodes abstraites et concrètes, des variables d\'instance, des constructeurs, et une classe peut hériter d\'une seule classe abstraite tant dis qu\'une interface ne peut avoir que des méthodes abstraites, des constantes, pas de constructeurs, et une classe peut implémenter plusieurs interfaces',2,1),(18,'Dans le contexte de la POO, qu\'est-ce qu\'un polymorphisme de compile-time?','Le polymorphisme de compile-time, ou polymorphisme statique, se réfère à la résolution des appels de méthodes au moment de la compilation, basée sur les types statiques des objets. Cela est généralement associé au surchargement de méthodes.',2,1),(19,'Comment peut-on empêcher l\'héritage d\'une classe en C++','En C++ l’on peut aussi qualifie une classe finale cela l\'empeche que la classe ne puisse être hérite',2,1),(20,'Le \"couplage fort\" en programmation orientée objet est','Le \"couplage fort\" en programmation orientée objet se réfère à une forte dépendance entre deux classes. Un fort couplage peut rendre le système moins flexible et plus difficile à maintenir.',3,1),(21,'la \"méthode template\" en programmation orientée objet est ','La \"méthode template\" en programmation orientée objet est une méthode qui fournit une structure générale dans une classe, mais permet aux sous-classes de redéfinir certains comportements. Cela favorise la réutilisation du code tout en permettant une personnalisation dans les sous-classes.',3,1),(22,'Qu\'est-ce que la \"composition\" en programmation orientée objet?','La \"composition\" en programmation orientée objet consiste à inclure des objets d\'une classe dans une autre classe pour réutiliser le code (option 3).',3,1),(23,'Qu\'est-ce que le \"principe d\'inversion de contrôle\" en programmation orientée objet?','Le \"principe d\'inversion de contrôle\" stipule que les composants d\'une application sont découplés et que la configuration est gérée par un conteneur externe .',3,1),(24,'la surcharge de l\'opérateur en C++ est:','La surcharge de l\'opérateur en C++ permet la possibilité d\'ajouter des fonctionnalités aux opérateurs standard pour les types définis par l\'utilisateur.',3,1),(25,'classe immuable en POO est: ','Une classe immuable est une classe dont les membres ne peuvent pas être modifiés après leur initialisation.',3,1),(26,'Chaînage de méthodes\" (method chaining) en POO','Le \"chaînage de méthodes\" (method chaining) consiste à créer des méthodes qui peuvent être appelées de manière séquentielle sur un objet, en utilisant le résultat de chaque appel comme cible pour le prochain appel.',3,1),(27,'La sérialisation','La \"sérialisation\" en programmation orientée objet consiste à convertir des objets en une séquence de bytes pour faciliter le stockage ou la transmission. Cela permet de sauvegarder l\'état d\'un objet et de le reconstituer ultérieurement.',3,1),(28,'Qu\'est-ce que le design pattern Singleton?','Le sigletton permet de garantir qu\'une classe sera instancier en garantissant un pont d\'acces global a cette instance.',1,1),(29,'Il est un  design pattern utilisé pour définir une famille d\'algorithmes, les encapsuler, et les rendre interchangeables','Le DP Strategy permet l\'implémentation de l\'interchangeabilité d\'un algorithme en fonction de son client.  ',1,1),(30,'Le design pattern utilisé pour fournir un mécanisme permettant de notifier plusieurs objets lorsque l\'état d\'un objet change','Le DP Observer permet de materialiser une relation un a plusieur ou un objet(Observable) contient une liste de ses dependances(observateurs) et les informent automatiquement en cas de changement de son etat.',1,1),(31,'Quel design pattern est employé pour traiter un élément unique ou plusieurs objets de manière similaire au sein d’une structure en arbre?','Le design pattern Composite permet de traiter les objets individuels et les compositions d\'objets de manière uniforme.',1,1),(32,'Design pattern est impliqué dans la création d\'objets sans spécifier la classe exacte de l\'objet à créer','Le design pattern Prototype permet de créer de nouveaux objets en copiant un objet existant, évitant ainsi la spécification de la classe exacte.',1,1),(33,'Il est utiliser pour notifier plusieurs objets d\'un changement d\'état dans un autre objet:','Le design pattern Observateur définit une dépendance d\'un-à-plusieurs entre objets de manière à ce que lorsque l\'un change d\'état, tous les dépendants sont notifiés et mis à jour automatiquement.',1,1),(34,'Ce design pattern est utilisé pour encapsuler une requête comme un objet','Le design pattern Commande encapsule une requête en tant qu\'objet, permettant de paramétrer les clients avec différentes requêtes, de mettre en file d\'attente les requêtes et de les annuler.',1,1),(35,' Quel design pattern est utilisé pour permettre à une classe de déléguer une partie de son comportement à une autre classe?','Le design pattern Stratégie permet à une classe de déléguer une partie de son comportement à une famille d\'algorithmes interchangeable.',1,1),(36,'La POO(Programmation Orientée  Objet) est','La programmation orientée objet (POO) est un paradigme de programmation.',1,1),(37,'Quel design pattern est utilisé pour ajouter de nouvelles fonctionnalités à un objet existant sans le modifier?','Decorator est un DP qui permet d\'attacher de nouvelles responsabilités à un objet de manière souple, sans modifier sa structure.',1,1),(38,'Une classe en POO est:','En programmation orientée objet (POO), une classe est un modèle ou un plan pour créer des objets.',1,1),(39,'Le garbage collection en programmation orientée objet est','Le garbage collection en POO est un processus automatisé de gestion de la mémoire qui consiste à identifier et à supprimer automatiquement les objets qui ne sont plus référencés par le programme, libérant ainsi la mémoire occupée par ces objets',1,1),(40,' Comment le design pattern State diffère-t-il du design pattern Strategy ?','Le design pattern State est spécifiquement conçu pour permettre à un objet de changer de comportement lorsqu\'il change d\'état, tandis que le design pattern Strategy se concentre sur la définition d\'une famille d\'algorithmes interchangeables.',2,1),(41,'Le concept d\'agregation ','Une agrégation définit la relation \"has a\" et représente un lien distant entre deux classe ou les deux membres de la relation peuvent exister indépendamment l’un de l’autre.',1,1),(42,'Dans le design pattern State, comment est généralement représenté chaque état ?','Dans le design pattern State, chaque état est généralement représenté par une classe concrète qui implémente une interface commune, permettant ainsi à l\'objet contexte de changer de comportement en changeant son état interne.',2,1),(43,'La delagation consite a confier une partie du travail a une autre classe ou objet, au lieu de les assignes a une seule unite.','Au lieu d\'effectuer toutes les tâches par une seule classe, on \"délègue\" certaines tâches à un autre composant pour les accomplir',1,1),(44,'Comment le design pattern Template Method facilite-t-il le principe du \"code once, use many times\"?','Le Template Method permet de définir la structure d\'un algorithme dans une classe mère, avec certaines étapes déléguées aux classes filles, facilitant ainsi la réutilisation du code.',2,1),(45,'La generalisation est permet a des sous-classe de derriver et ainsi de finir des sous-classes plus spécifiques.','Une généralisation définit la relation \"est une sorte de\" (parfois \"prend la forme de\") et utilse l\'héritage comme mécanisme de partage.',1,1),(46,'Qu\'est-ce qui distingue une méthode concrète d\'une méthode abstraite dans le contexte du design pattern Template Method ?','Une méthode concrète est une méthode déjà implémentée dans la classe mère, tandis qu\'une méthode abstraite doit être redéfinie par les classes filles pour personnaliser le comportement.',2,1),(47,'Un constructeur permet','Un constructeur est une methode de meme nom que la classe, qui initialise un objet.',1,1),(48,'En quoi le design pattern Facade diffère-t-il du design pattern Adapter ?','e design pattern Facade fournit une interface unifiée pour simplifier l\'accès à un sous-système, tandis que le design pattern Adapter permet à des interfaces incompatibles de travailler ensemble.',2,1),(49,'La principale caracteristique de l\'heritage ','l\'heritage est un principe de la POO qui permet de derriver les attributs, methodes d\'une classe(superclasse)  a une autre classe(classe derrivee)',1,1),(50,'Comment le design pattern Facade améliore-t-il la modularité du code ?','Le design pattern Facade améliore la modularité en fournissant une interface simple et unifiée pour un ensemble d\'interfaces complexes, permettant ainsi au client de ne pas être directement exposé à la complexité interne.',2,1),(51,'L\'encapsulation est employer pour ','En POO l\'encapsulation sert a dissimuler les details d\'implementaion d\'un objet et de ne permetre l\'access qu\'a travers des methodes specifiques',1,1),(52,'Comment une classe Facade peut-elle être implémentée pour simplifier l\'accès à un sous-système complexe ?','Une classe Facade utilise une interface commune pour toutes les classes du sous-système, fournissant ainsi une interface simplifiée au client.',2,1),(53,'Ce n\'est pas un des quatres principes de la Programmation Orrientee Objet','La programmation orientée objet (POO) a 4 principaux fondamentaux a savoir: l\'heritage, l\'encapsulation, le polymorphisme, Abstraction',2,1),(54,'Comment le design pattern Bridge se différencie-t-il du design pattern Flyweight ?','Le design pattern Bridge permet à une abstraction et à son implémentation d\'évoluer indépendamment, tandis que le design pattern Flyweight vise à réduire la duplication d\'objets en partageant des objets similaires pour économiser de la mémoire.',2,1),(55,'Le  mot cle virtual en POO C++','Le mot cle virtual en C++ permet de cree des fonctions virtuelles,  methodes de la classe de base qui peuvent etre redefinir dans les classes derrivee afin  d\'y faire reference a un objet par un pointeur a la superclasse',2,1),(56,'Le polymorphisme en POO','Le Polymorphisme est le moyen permettan d\'eviter l\'utilisation des classes',2,1),(57,'Le role principal du design pattern Mediator dans la programmation est: ','Le design pattern Mediator est principalement utilisé pour faciliter la communication entre les objets d\'un système. Il promeut le découplage en centralisant la communication entre les composants, réduisant ainsi les dépendances directes entre eux. Cela améliore la maintenabilité et la flexibilité du système.',2,1),(58,'Quel type de polymorphisme permet l\'utilisation de fonctions ou d\'opérateurs qui agissent de manière différente en fonction des types des arguments ?','Le polymorphisme ad hoc/overloading ou surchage de fonction: est une possbilite offerte par certain langage de programmation de definir des fonctions de meme nom mais qui se differentie par le nombre ou le type de parametre effectif',2,1),(59,'Quel est le rôle principal du pattern Builder dans la conception logicielle?','Le pattern Builder permet de construire des objets étape par étape, en séparant le processus de construction de la représentation finale. Cela offre une flexibilité et un contrôle accrus lors de la création d\'objets complexes.',2,1),(60,'L\'abstraction se decrit comme','L\'abstraction est concept fondamentale de la POO qui fait reference a une simplification des systemes complexes en se concentrant sur les aspects pertinent en ignorant les details non-essentiels.',2,1),(61,'Quelle caractéristique distingue le design pattern Observer des autres patterns comportementaux tels que Strategy et Command?',' Il se distingue en permettant la communication bidirectionnelle entre sujets et observateurs, contrairement aux autres patterns mentionnés.',3,1),(62,'Il n\'est pas un specifateur d\'acces en programmation','En programmation il existre 3 specificateur d\'acces en programmation: public, private , protected',2,1),(63,'Vous utilisez le patron de conception Singleton pour créer une seule instance d\'un objet. Quel est l\'inconvénient le plus probable de cette utilisation ?','e singleton peut devenir un point de défaillance unique si l\'objet est critique pour le fonctionnement du système. En cas de défaillance de l\'objet, l\'ensemble du système peut être affecté.',3,1),(64,'Quelle affirmation décrit correctement les spécificités des constructeurs par copie et par déplacement (move) en programmation orientée objet (POO)?','Le constructeur par copie crée une copie profonde d\'un objet en copiant les valeurs de ses attributs, tandis que le move constructeur transfère la propriété des ressources d\'un objet à un autre, évitant la copie coûteuse des données',2,1),(65,'Quelle est la différence entre une classe abstraite et une interface en Java?','Une classe abstraite peut avoir des méthodes abstraites et concrètes, des variables d\'instance, des constructeurs, et une classe peut hériter d\'une seule classe abstraite tant dis qu\'une interface ne peut avoir que des méthodes abstraites, des constantes, pas de constructeurs, et une classe peut implémenter plusieurs interfaces',2,1),(66,'Quel design pattern implique deux objets, le créateur (Originator) et le gardien (Caretaker), qui travaillent ensemble pour sauvegarder et restaurer l\'état de l\'objet?','Le memento permet de restaure l\'etat precedant d\'un objet securitairement en impliquant un créateur (Originator) et le gardien (Caretaker) qui travailler pour cela.',3,1),(67,'Dans le contexte de la POO, qu\'est-ce qu\'un polymorphisme de compile-time?','Le polymorphisme de compile-time, ou polymorphisme statique, se réfère à la résolution des appels de méthodes au moment de la compilation, basée sur les types statiques des objets. Cela est généralement associé au surchargement de méthodes.',2,1),(68,'Quel ouvrage classique est largement reconnu comme l\'autorité en matière de design patterns dans le domaine de la programmation orientée objet?','\"Design Patterns: Elements of Reusable Object-Oriented Software\" est un ouvrage écrit par Erich Gamma, Richard Helm, Ralph Johnson, et John Vlissides, communément appelé le \"Gang of Four\" (GoF).',3,1),(69,'Comment peut-on empêcher l\'héritage d\'une classe en C++','En C++ l’on peut aussi qualifie une classe finale cela l\'empeche que la classe ne puisse être hérite',2,1),(70,' La programmation événementielle','La programmation événementielle est un paradigme où le flux de contrôle est déterminé par des événements, tels que des clics de souris, des pressions de touches, ou d\'autres interactions utilisateur. Les programmes réagissent à ces événements en déclenchant des gestionnaires d\'événements spécifiques.',1,1),(71,'Le \"couplage fort\" en programmation orientée objet est','Le \"couplage fort\" en programmation orientée objet se réfère à une forte dépendance entre deux classes. Un fort couplage peut rendre le système moins flexible et plus difficile à maintenir.',3,1),(72,'la \"méthode template\" en programmation orientée objet est ','La \"méthode template\" en programmation orientée objet est une méthode qui fournit une structure générale dans une classe, mais permet aux sous-classes de redéfinir certains comportements. Cela favorise la réutilisation du code tout en permettant une personnalisation dans les sous-classes.',3,1),(73,'Le modèle de programmation événementielle repose sur le traitement séquentiel des instructions','En programmation événementielle, le flux de contrôle est déterminé par des événements, ce qui peut entraîner des réponses non séquentielles.',1,1),(74,'Qu\'est-ce que la \"composition\" en programmation orientée objet?','La \"composition\" en programmation orientée objet consiste à inclure des objets d\'une classe dans une autre classe pour réutiliser le code (option 3).',3,1),(75,'L\'événement \"click\" est associé à quel type d\'interaction utilisateur ?','L\'événement \"click\" est généralement déclenché par un clic de souris.',1,1),(76,'Qu\'est-ce que le \"principe d\'inversion de contrôle\" en programmation orientée objet?','Le \"principe d\'inversion de contrôle\" stipule que les composants d\'une application sont découplés et que la configuration est gérée par un conteneur externe .',3,1),(77,'la surcharge de l\'opérateur en C++ est:','La surcharge de l\'opérateur en C++ permet la possibilité d\'ajouter des fonctionnalités aux opérateurs standard pour les types définis par l\'utilisateur.',3,1),(78,'Lorsqu\'un événement se produit dans une application, quel est le rôle d\'un gestionnaire d\'événements ?','Un gestionnaire d\'événements est responsable de définir la réponse à un événement spécifique',1,1),(79,'classe immuable en POO est: ','Une classe immuable est une classe dont les membres ne peuvent pas être modifiés après leur initialisation.',3,1),(80,'Les callbacks sont couramment utilisés dans la programmation événementielle. Que représentent-ils généralement ?','Les callbacks sont des fonctions passées en tant qu\'arguments à d\'autres fonctions, et elles sont souvent utilisées pour gérer les événements.',1,1),(81,'Chaînage de méthodes\" (method chaining) en POO','Le \"chaînage de méthodes\" (method chaining) consiste à créer des méthodes qui peuvent être appelées de manière séquentielle sur un objet, en utilisant le résultat de chaque appel comme cible pour le prochain appel.',3,1),(82,'En JavaScript, comment attacher un gestionnaire d\'événements à un élément HTML avec l\'ID \"btnClick\" ?','La méthode addEventListener est utilisée pour attacher des gestionnaires d\'événements en JavaScript.',1,1),(83,'La sérialisation','La \"sérialisation\" en programmation orientée objet consiste à convertir des objets en une séquence de bytes pour faciliter le stockage ou la transmission. Cela permet de sauvegarder l\'état d\'un objet et de le reconstituer ultérieurement.',3,1),(84,'Qu\'est-ce que le design pattern Singleton?','Le sigletton permet de garantir qu\'une classe sera instancier en garantissant un pont d\'acces global a cette instance.',1,1),(85,'Dans le modèle de programmation événementielle, que représente un émetteur d\'événements ?','L\'émetteur d\'événements est l\'objet qui génère et émet un événement.',1,1),(86,'Il est un  design pattern utilisé pour définir une famille d\'algorithmes, les encapsuler, et les rendre interchangeables','Le DP Strategy permet l\'implémentation de l\'interchangeabilité d\'un algorithme en fonction de son client.  ',1,1),(87,'Les événements bubbling et capturing sont des phases dans la propagation des événements. Dans quelle phase le gestionnaire d\'événements est-il déclenché en premier ?','La phase de capturing se produit avant la phase de bubbling dans la propagation des événements.',1,1),(88,'Le design pattern utilisé pour fournir un mécanisme permettant de notifier plusieurs objets lorsque l\'état d\'un objet change','Le DP Observer permet de materialiser une relation un a plusieur ou un objet(Observable) contient une liste de ses dependances(observateurs) et les informent automatiquement en cas de changement de son etat.',1,1),(89,'En programmation événementielle, qu\'est-ce qu\'un événement synthétique ?','Un événement synthétique est créé par le navigateur, souvent en réponse à des actions de l\'utilisateur.',1,1),(90,'Quel design pattern est employé pour traiter un élément unique ou plusieurs objets de manière similaire au sein d’une structure en arbre?','Le design pattern Composite permet de traiter les objets individuels et les compositions d\'objets de manière uniforme.',1,1),(91,'Quelle méthode est utilisée pour arrêter la propagation d\'un événement dans JavaScript ?',' La méthode stopPropagation() est utilisée pour arrêter la propagation d\'un événement dans les phases de capturing ou de bubbling.',1,1),(92,'Design pattern est impliqué dans la création d\'objets sans spécifier la classe exacte de l\'objet à créer','Le design pattern Prototype permet de créer de nouveaux objets en copiant un objet existant, évitant ainsi la spécification de la classe exacte.',1,1),(93,'Quelle méthode est utilisée pour écouter un événement en jQuery ?','En jQuery, la méthode on() est utilisée pour attacher un gestionnaire d\'événement à un élément.',2,1),(94,'Il est utiliser pour notifier plusieurs objets d\'un changement d\'état dans un autre objet:','Le design pattern Observateur définit une dépendance d\'un-à-plusieurs entre objets de manière à ce que lorsque l\'un change d\'état, tous les dépendants sont notifiés et mis à jour automatiquement.',1,1),(95,'Quelle est la fonction principale du gestionnaire d\'événements dans une application Android ?','Le gestionnaire d\'événements dans une application Android est responsable de la gestion des interactions utilisateur telles que les clics, les balayages, etc.',2,1),(96,'Ce design pattern est utilisé pour encapsuler une requête comme un objet','Le design pattern Commande encapsule une requête en tant qu\'objet, permettant de paramétrer les clients avec différentes requêtes, de mettre en file d\'attente les requêtes et de les annuler.',1,1),(97,'En JavaScript, quelle méthode est utilisée pour empêcher le comportement par défaut d\'un événement ?','event.preventDefault() est methode utilisée pour annuler le comportement par défaut d\'un événement, par exemple, empêcher le rechargement d\'une page lorsqu\'un formulaire est soumis.',2,1),(98,' Quel design pattern est utilisé pour permettre à une classe de déléguer une partie de son comportement à une autre classe?','Le design pattern Stratégie permet à une classe de déléguer une partie de son comportement à une famille d\'algorithmes interchangeable.',1,1),(99,' Qu\'est-ce que le bubbling dans le contexte des événements DOM en JavaScript ?','La propagation des événements du parent vers l\'enfant. Le bubbling est le processus par lequel un événement se propage du niveau le plus interne (l\'enfant) vers le niveau le plus externe (le parent) dans la hiérarchie DOM.',2,1),(100,'Quel design pattern est utilisé pour ajouter de nouvelles fonctionnalités à un objet existant sans le modifier?','Decorator est un DP qui permet d\'attacher de nouvelles responsabilités à un objet de manière souple, sans modifier sa structure.',1,1),(101,'En Java Swing, quelle classe est utilisée pour gérer les événements de bouton ?','En Java Swing, les événements de bouton sont généralement gérés à l\'aide de la classe ActionEvent',2,1),(102,' Comment le design pattern State diffère-t-il du design pattern Strategy ?','Le design pattern State est spécifiquement conçu pour permettre à un objet de changer de comportement lorsqu\'il change d\'état, tandis que le design pattern Strategy se concentre sur la définition d\'une famille d\'algorithmes interchangeables.',2,1),(103,'Quelle méthode est utilisée pour détacher un gestionnaire d\'événements en JavaScript ?','removeEventListener() est une methode utilisée pour détacher un gestionnaire d\'événements attaché précédemment à un élément en utilisant addEventListener().',2,1),(104,'Dans le design pattern State, comment est généralement représenté chaque état ?','Dans le design pattern State, chaque état est généralement représenté par une classe concrète qui implémente une interface commune, permettant ainsi à l\'objet contexte de changer de comportement en changeant son état interne.',2,1),(105,'Comment le design pattern Template Method facilite-t-il le principe du \"code once, use many times\"?','Le Template Method permet de définir la structure d\'un algorithme dans une classe mère, avec certaines étapes déléguées aux classes filles, facilitant ainsi la réutilisation du code.',2,1),(106,'Dans le modèle MVC (Modèle-Vue-Contrôleur), où sont généralement gérés les événements utilisateur ?','Dans le modèle MVC, la gestion des événements utilisateur est généralement effectuée par le contrôleur, qui agit comme un intermédiaire entre la vue et le modèle.',2,1),(107,'Qu\'est-ce qui distingue une méthode concrète d\'une méthode abstraite dans le contexte du design pattern Template Method ?','Une méthode concrète est une méthode déjà implémentée dans la classe mère, tandis qu\'une méthode abstraite doit être redéfinie par les classes filles pour personnaliser le comportement.',2,1),(108,'Quelle méthode est utilisée pour émettre un événement personnalisé en JavaScript ?','dispatchEvent()  est une méthode utilisée pour déclencher un événement personnalisé en JavaScript.',2,1),(109,'En quoi le design pattern Facade diffère-t-il du design pattern Adapter ?','e design pattern Facade fournit une interface unifiée pour simplifier l\'accès à un sous-système, tandis que le design pattern Adapter permet à des interfaces incompatibles de travailler ensemble.',2,1),(110,'Qu\'est-ce que l\'asynchrone dans le contexte de la programmation événementielle en Node.js ?','En Node.js, le modèle asynchrone permet l\'exécution de plusieurs tâches simultanément sans bloquer le thread principal.',2,1),(111,'Comment le design pattern Facade améliore-t-il la modularité du code ?','Le design pattern Facade améliore la modularité en fournissant une interface simple et unifiée pour un ensemble d\'interfaces complexes, permettant ainsi au client de ne pas être directement exposé à la complexité interne.',2,1),(112,'Quel événement est déclenché lorsqu\'une animation CSS se termine ?','animationEnd est un événement  déclenché lorsque l\'animation CSS se termine, permettant aux développeurs d\'effectuer des actions supplémentaires après la fin de l\'animation.',2,1),(113,'Comment une classe Facade peut-elle être implémentée pour simplifier l\'accès à un sous-système complexe ?','Une classe Facade utilise une interface commune pour toutes les classes du sous-système, fournissant ainsi une interface simplifiée au client.',2,1),(114,'Quelle méthode est généralement utilisée pour gérer les événements de souris en JavaScript?','a méthode addEventListener est couramment utilisée pour gérer les événements de souris en JavaScript. Elle permet d\'attacher un gestionnaire d\'événements (callback) à un élément DOM pour écouter des événements spécifiques, comme un clic.',3,1),(115,'Comment le design pattern Bridge se différencie-t-il du design pattern Flyweight ?','Le design pattern Bridge permet à une abstraction et à son implémentation d\'évoluer indépendamment, tandis que le design pattern Flyweight vise à réduire la duplication d\'objets en partageant des objets similaires pour économiser de la mémoire.',2,1),(116,'Le role principal du design pattern Mediator dans la programmation est: ','Le design pattern Mediator est principalement utilisé pour faciliter la communication entre les objets d\'un système. Il promeut le découplage en centralisant la communication entre les composants, réduisant ainsi les dépendances directes entre eux. Cela améliore la maintenabilité et la flexibilité du système.',2,1),(117,'Dans le contexte de Node.js, comment gère-t-on les événements système?','Node.js gère les événements système en utilisant le module events. On émet des événements personnalisés et on attache des gestionnaires pour y répondre.',3,1),(118,'Quel est le rôle principal du pattern Builder dans la conception logicielle?','Le pattern Builder permet de construire des objets étape par étape, en séparant le processus de construction de la représentation finale. Cela offre une flexibilité et un contrôle accrus lors de la création d\'objets complexes.',2,1),(119,'Quelle est la principale différence entre la propagation des événements (event bubbling) et la capture des événements (event capturing) dans le modèle DOM?','La principale différence réside dans l\'ordre d\'appel des gestionnaires d\'événements. Lors de la propagation des événements, les gestionnaires sont appelés du plus spécifique au plus général (du bas vers le haut), tandis qu\'en capture d\'événements, l\'ordre est inverse (du haut vers le bas).',3,1),(120,'Quelle caractéristique distingue le design pattern Observer des autres patterns comportementaux tels que Strategy et Command?',' Il se distingue en permettant la communication bidirectionnelle entre sujets et observateurs, contrairement aux autres patterns mentionnés.',3,1),(121,'Quelle API JavaScript permet la manipulation avancée du temps et des délais dans le contexte de la programmation événementielle?','L\'API requestAnimationFrame est utilisée pour effectuer des opérations d\'animation et est particulièrement efficace pour manipuler le temps dans les contextes de programmation événementielle.',3,1),(122,'Vous utilisez le patron de conception Singleton pour créer une seule instance d\'un objet. Quel est l\'inconvénient le plus probable de cette utilisation ?','e singleton peut devenir un point de défaillance unique si l\'objet est critique pour le fonctionnement du système. En cas de défaillance de l\'objet, l\'ensemble du système peut être affecté.',3,1),(123,'Quelle méthode est utilisée pour empêcher le comportement par défaut d\'un événement dans un gestionnaire d\'événements JavaScript?','La méthode event.preventDefault() est utilisée pour empêcher le comportement par défaut associé à un événement, par exemple, l\'envoi d\'un formulaire ou la navigation vers une autre page',3,1),(124,'Quel design pattern implique deux objets, le créateur (Originator) et le gardien (Caretaker), qui travaillent ensemble pour sauvegarder et restaurer l\'état de l\'objet?','Le memento permet de restaure l\'etat precedant d\'un objet securitairement en impliquant un créateur (Originator) et le gardien (Caretaker) qui travailler pour cela.',3,1),(125,'Le rôle de l\'objet Event dans la programmation événementielle JavaScript est:',' L\'objet Event représente un événement spécifique et expose des propriétés détaillées sur cet événement, telles que le type, la cible, et d\'autres informations utiles.',3,1),(126,'Quel ouvrage classique est largement reconnu comme l\'autorité en matière de design patterns dans le domaine de la programmation orientée objet?','\"Design Patterns: Elements of Reusable Object-Oriented Software\" est un ouvrage écrit par Erich Gamma, Richard Helm, Ralph Johnson, et John Vlissides, communément appelé le \"Gang of Four\" (GoF).',3,1),(127,'Comment peut-on éviter les problèmes de gestion des événements liés à la modification dynamique du DOM?','La délégation d\'événements implique l\'attachement d\'un gestionnaire d\'événements à un ancêtre stable plutôt qu\'à chaque nouvel élément, facilitant la gestion des événements pour les éléments futurs.',3,1),(128,' La programmation événementielle','La programmation événementielle est un paradigme où le flux de contrôle est déterminé par des événements, tels que des clics de souris, des pressions de touches, ou d\'autres interactions utilisateur. Les programmes réagissent à ces événements en déclenchant des gestionnaires d\'événements spécifiques.',1,1),(129,'Le modèle de programmation événementielle repose sur le traitement séquentiel des instructions','En programmation événementielle, le flux de contrôle est déterminé par des événements, ce qui peut entraîner des réponses non séquentielles.',1,1),(130,'Qu\'est-ce que l\'événement DOMContentLoaded en JavaScript?','L\'événement DOMContentLoaded se déclenche lorsque le DOM est prêt, ce qui signifie que la structure de la page est disponible, mais toutes les ressources externes n\'ont pas nécessairement été chargées.',3,1),(131,'Quelle est la principale différence entre e.stopPropagation() et e.preventDefault() dans un gestionnaire d\'événements JavaScript?','La méthode e.stopPropagation() est utilisée pour arrêter la propagation de l\'événement vers les éléments parents, tandis que e.preventDefault() est utilisée pour empêcher le comportement par défaut associé à l\'événement, comme l\'envoi d\'un formulaire.',3,1),(132,'L\'événement \"click\" est associé à quel type d\'interaction utilisateur ?','L\'événement \"click\" est généralement déclenché par un clic de souris.',1,1),(133,'Lorsqu\'un événement se produit dans une application, quel est le rôle d\'un gestionnaire d\'événements ?','Un gestionnaire d\'événements est responsable de définir la réponse à un événement spécifique',1,1),(134,'Les callbacks sont couramment utilisés dans la programmation événementielle. Que représentent-ils généralement ?','Les callbacks sont des fonctions passées en tant qu\'arguments à d\'autres fonctions, et elles sont souvent utilisées pour gérer les événements.',1,1),(135,'En JavaScript, comment attacher un gestionnaire d\'événements à un élément HTML avec l\'ID \"btnClick\" ?','La méthode addEventListener est utilisée pour attacher des gestionnaires d\'événements en JavaScript.',1,1),(136,'Dans le modèle de programmation événementielle, que représente un émetteur d\'événements ?','L\'émetteur d\'événements est l\'objet qui génère et émet un événement.',1,1),(137,'Les événements bubbling et capturing sont des phases dans la propagation des événements. Dans quelle phase le gestionnaire d\'événements est-il déclenché en premier ?','La phase de capturing se produit avant la phase de bubbling dans la propagation des événements.',1,1),(138,'En programmation événementielle, qu\'est-ce qu\'un événement synthétique ?','Un événement synthétique est créé par le navigateur, souvent en réponse à des actions de l\'utilisateur.',1,1),(139,'Quelle méthode est utilisée pour arrêter la propagation d\'un événement dans JavaScript ?',' La méthode stopPropagation() est utilisée pour arrêter la propagation d\'un événement dans les phases de capturing ou de bubbling.',1,1),(140,'Quelle méthode est utilisée pour écouter un événement en jQuery ?','En jQuery, la méthode on() est utilisée pour attacher un gestionnaire d\'événement à un élément.',2,1),(141,'Quelle est la fonction principale du gestionnaire d\'événements dans une application Android ?','Le gestionnaire d\'événements dans une application Android est responsable de la gestion des interactions utilisateur telles que les clics, les balayages, etc.',2,1),(142,'En JavaScript, quelle méthode est utilisée pour empêcher le comportement par défaut d\'un événement ?','event.preventDefault() est methode utilisée pour annuler le comportement par défaut d\'un événement, par exemple, empêcher le rechargement d\'une page lorsqu\'un formulaire est soumis.',2,1),(143,' Qu\'est-ce que le bubbling dans le contexte des événements DOM en JavaScript ?','La propagation des événements du parent vers l\'enfant. Le bubbling est le processus par lequel un événement se propage du niveau le plus interne (l\'enfant) vers le niveau le plus externe (le parent) dans la hiérarchie DOM.',2,1),(144,'En Java Swing, quelle classe est utilisée pour gérer les événements de bouton ?','En Java Swing, les événements de bouton sont généralement gérés à l\'aide de la classe ActionEvent',2,1),(145,'Quelle méthode est utilisée pour détacher un gestionnaire d\'événements en JavaScript ?','removeEventListener() est une methode utilisée pour détacher un gestionnaire d\'événements attaché précédemment à un élément en utilisant addEventListener().',2,1),(146,'Dans le modèle MVC (Modèle-Vue-Contrôleur), où sont généralement gérés les événements utilisateur ?','Dans le modèle MVC, la gestion des événements utilisateur est généralement effectuée par le contrôleur, qui agit comme un intermédiaire entre la vue et le modèle.',2,1),(147,'Quelle méthode est utilisée pour émettre un événement personnalisé en JavaScript ?','dispatchEvent()  est une méthode utilisée pour déclencher un événement personnalisé en JavaScript.',2,1),(148,'Qu\'est-ce que l\'asynchrone dans le contexte de la programmation événementielle en Node.js ?','En Node.js, le modèle asynchrone permet l\'exécution de plusieurs tâches simultanément sans bloquer le thread principal.',2,1),(149,'Quel événement est déclenché lorsqu\'une animation CSS se termine ?','animationEnd est un événement  déclenché lorsque l\'animation CSS se termine, permettant aux développeurs d\'effectuer des actions supplémentaires après la fin de l\'animation.',2,1),(150,'Quelle méthode est généralement utilisée pour gérer les événements de souris en JavaScript?','a méthode addEventListener est couramment utilisée pour gérer les événements de souris en JavaScript. Elle permet d\'attacher un gestionnaire d\'événements (callback) à un élément DOM pour écouter des événements spécifiques, comme un clic.',3,1),(151,'Dans le contexte de Node.js, comment gère-t-on les événements système?','Node.js gère les événements système en utilisant le module events. On émet des événements personnalisés et on attache des gestionnaires pour y répondre.',3,1),(152,'Quelle est la principale différence entre la propagation des événements (event bubbling) et la capture des événements (event capturing) dans le modèle DOM?','La principale différence réside dans l\'ordre d\'appel des gestionnaires d\'événements. Lors de la propagation des événements, les gestionnaires sont appelés du plus spécifique au plus général (du bas vers le haut), tandis qu\'en capture d\'événements, l\'ordre est inverse (du haut vers le bas).',3,1),(153,'Quelle API JavaScript permet la manipulation avancée du temps et des délais dans le contexte de la programmation événementielle?','L\'API requestAnimationFrame est utilisée pour effectuer des opérations d\'animation et est particulièrement efficace pour manipuler le temps dans les contextes de programmation événementielle.',3,1),(154,'Quelle méthode est utilisée pour empêcher le comportement par défaut d\'un événement dans un gestionnaire d\'événements JavaScript?','La méthode event.preventDefault() est utilisée pour empêcher le comportement par défaut associé à un événement, par exemple, l\'envoi d\'un formulaire ou la navigation vers une autre page',3,1),(155,'Le rôle de l\'objet Event dans la programmation événementielle JavaScript est:',' L\'objet Event représente un événement spécifique et expose des propriétés détaillées sur cet événement, telles que le type, la cible, et d\'autres informations utiles.',3,1),(156,'Comment peut-on éviter les problèmes de gestion des événements liés à la modification dynamique du DOM?','La délégation d\'événements implique l\'attachement d\'un gestionnaire d\'événements à un ancêtre stable plutôt qu\'à chaque nouvel élément, facilitant la gestion des événements pour les éléments futurs.',3,1),(157,'Qu\'est-ce que l\'événement DOMContentLoaded en JavaScript?','L\'événement DOMContentLoaded se déclenche lorsque le DOM est prêt, ce qui signifie que la structure de la page est disponible, mais toutes les ressources externes n\'ont pas nécessairement été chargées.',3,1),(158,'Quelle est la principale différence entre e.stopPropagation() et e.preventDefault() dans un gestionnaire d\'événements JavaScript?','La méthode e.stopPropagation() est utilisée pour arrêter la propagation de l\'événement vers les éléments parents, tandis que e.preventDefault() est utilisée pour empêcher le comportement par défaut associé à l\'événement, comme l\'envoi d\'un formulaire.',3,1);
/*!40000 ALTER TABLE `question` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `question_option`
--

DROP TABLE IF EXISTS `question_option`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `question_option` (
  `question_option_id` int NOT NULL AUTO_INCREMENT,
  `question_id` int DEFAULT NULL,
  `option_id` int DEFAULT NULL,
  PRIMARY KEY (`question_option_id`),
  KEY `idx_question_id` (`question_id`),
  KEY `idx_option_id` (`option_id`),
  CONSTRAINT `question_option_ibfk_1` FOREIGN KEY (`question_id`) REFERENCES `question` (`question_id`),
  CONSTRAINT `question_option_ibfk_2` FOREIGN KEY (`option_id`) REFERENCES `option` (`option_id`)
) ENGINE=InnoDB AUTO_INCREMENT=563 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `question_option`
--

LOCK TABLES `question_option` WRITE;
/*!40000 ALTER TABLE `question_option` DISABLE KEYS */;
INSERT INTO `question_option` VALUES (1,1,1),(2,1,2),(3,2,3),(4,2,4),(5,3,5),(6,3,6),(7,4,7),(8,4,8),(9,5,9),(10,5,10),(11,6,11),(12,6,12),(13,7,13),(14,7,14),(15,8,15),(16,8,16),(17,9,17),(18,9,18),(19,10,19),(20,10,20),(21,10,21),(22,10,22),(23,11,23),(24,11,24),(25,11,25),(26,11,26),(27,12,27),(28,12,28),(29,12,29),(30,12,30),(31,13,31),(32,13,32),(33,13,33),(34,13,34),(35,14,35),(36,14,36),(37,14,37),(38,14,38),(39,15,39),(40,15,40),(41,15,41),(42,15,42),(43,16,43),(44,16,44),(45,16,45),(46,16,46),(47,17,47),(48,17,48),(49,17,49),(50,17,50),(51,18,51),(52,18,52),(53,18,53),(54,18,54),(55,19,55),(56,19,56),(57,19,57),(58,19,58),(59,20,59),(60,20,60),(61,20,61),(62,20,62),(63,20,63),(64,21,64),(65,21,65),(66,21,66),(67,21,67),(68,21,68),(69,22,69),(70,22,70),(71,22,71),(72,22,72),(73,22,73),(74,23,74),(75,23,75),(76,23,76),(77,23,77),(78,23,78),(79,24,79),(80,24,80),(81,24,81),(82,24,82),(83,24,83),(84,25,84),(85,25,85),(86,25,86),(87,25,87),(88,25,88),(89,26,89),(90,26,90),(91,26,91),(92,26,92),(93,26,93),(94,27,94),(95,27,95),(96,27,96),(97,27,97),(98,27,98),(99,28,99),(100,28,100),(101,29,101),(102,29,102),(103,30,103),(104,30,104),(105,31,105),(106,31,106),(107,32,107),(108,32,108),(109,33,109),(110,33,110),(111,34,111),(112,34,112),(113,35,113),(114,35,114),(115,36,115),(116,36,116),(117,37,117),(118,38,119),(119,37,118),(120,38,120),(121,39,121),(122,39,122),(123,40,123),(124,40,124),(125,40,125),(126,40,126),(127,41,127),(128,41,128),(129,42,129),(130,42,130),(131,42,131),(132,42,132),(133,43,133),(134,43,134),(135,44,135),(136,44,136),(137,44,137),(138,44,138),(139,45,139),(140,45,140),(141,46,141),(142,46,142),(143,46,143),(144,46,144),(145,47,145),(146,47,146),(147,48,147),(148,48,148),(149,48,149),(150,48,150),(151,49,151),(152,49,152),(153,50,153),(154,50,154),(155,50,155),(156,50,156),(157,51,157),(158,51,158),(159,52,159),(160,52,160),(161,52,161),(162,52,162),(163,53,163),(164,53,164),(165,53,165),(166,53,166),(167,54,167),(168,54,168),(169,54,169),(170,54,170),(171,55,171),(172,55,172),(173,55,173),(174,55,174),(175,56,175),(176,56,176),(177,56,177),(178,56,178),(179,57,179),(180,57,180),(181,57,181),(182,57,182),(183,58,183),(184,58,184),(185,58,185),(186,58,186),(187,59,187),(188,59,188),(189,59,189),(190,59,190),(191,60,191),(192,60,192),(193,60,193),(194,60,194),(195,61,195),(196,61,196),(197,61,197),(198,61,198),(199,61,199),(200,62,200),(201,62,201),(202,62,202),(203,62,203),(204,63,204),(205,63,205),(206,63,206),(207,63,207),(208,63,208),(209,64,209),(210,64,210),(211,64,211),(212,64,212),(213,65,213),(214,65,214),(215,65,215),(216,65,216),(217,66,217),(218,66,218),(219,66,219),(220,66,220),(221,66,221),(222,67,222),(223,67,223),(224,67,224),(225,67,225),(226,68,226),(227,68,227),(228,68,228),(229,68,229),(230,68,230),(231,69,231),(232,69,232),(233,69,233),(234,69,234),(235,71,236),(236,71,237),(237,71,238),(238,71,239),(239,71,240),(240,70,235),(241,70,241),(242,72,242),(243,72,243),(244,72,244),(245,72,245),(246,72,246),(247,73,247),(248,73,248),(249,74,249),(250,74,250),(251,74,251),(252,74,252),(253,74,253),(254,75,254),(255,76,256),(256,76,257),(257,76,258),(258,76,259),(259,76,260),(260,75,255),(261,77,261),(262,77,262),(263,77,263),(264,77,264),(265,77,265),(266,78,266),(267,78,267),(268,79,268),(269,79,269),(270,79,270),(271,79,271),(272,79,272),(273,80,273),(274,80,274),(275,81,275),(276,81,276),(277,81,277),(278,81,278),(279,81,279),(280,83,282),(281,83,283),(282,83,284),(283,83,285),(284,83,286),(285,82,280),(286,82,281),(287,84,287),(288,84,288),(289,85,289),(290,85,290),(291,86,291),(292,86,292),(293,87,293),(294,87,294),(295,88,295),(296,88,296),(297,89,297),(298,89,298),(299,90,299),(300,90,300),(301,91,301),(302,91,302),(303,92,303),(304,92,304),(305,93,305),(306,93,306),(307,93,307),(308,93,308),(309,94,309),(310,94,310),(311,95,311),(312,95,312),(313,95,313),(314,95,314),(315,96,315),(316,96,316),(317,97,317),(318,97,318),(319,97,319),(320,97,320),(321,98,321),(322,98,322),(323,99,323),(324,99,324),(325,99,325),(326,99,326),(327,100,327),(328,100,328),(329,101,329),(330,101,330),(331,101,331),(332,101,332),(333,102,333),(334,102,334),(335,102,335),(336,102,336),(337,104,338),(338,104,339),(339,104,341),(340,104,343),(341,103,337),(342,103,340),(343,103,342),(344,103,344),(345,105,345),(346,105,346),(347,105,347),(348,105,348),(349,106,349),(350,106,350),(351,106,351),(352,106,352),(353,107,353),(354,107,354),(355,107,355),(356,107,356),(357,108,357),(358,108,358),(359,108,359),(360,108,360),(361,109,361),(362,109,362),(363,109,363),(364,109,364),(365,110,365),(366,110,366),(367,110,367),(368,110,368),(369,111,369),(370,111,370),(371,111,371),(372,111,372),(373,112,373),(374,112,375),(375,112,376),(376,112,378),(377,113,374),(378,113,377),(379,113,379),(380,113,380),(381,115,381),(382,115,382),(383,115,383),(384,115,384),(385,114,385),(386,114,386),(387,114,387),(388,114,388),(389,114,389),(390,116,390),(391,116,391),(392,116,392),(393,116,393),(394,117,394),(395,117,395),(396,117,396),(397,117,397),(398,117,398),(399,118,399),(400,118,400),(401,118,401),(402,118,402),(403,119,403),(404,119,404),(405,119,405),(406,119,406),(407,119,407),(408,120,408),(409,120,409),(410,120,410),(411,120,411),(412,120,412),(413,121,413),(414,121,414),(415,121,415),(416,121,416),(417,121,417),(418,122,418),(419,122,419),(420,122,420),(421,122,421),(422,122,422),(423,123,423),(424,123,424),(425,123,425),(426,123,426),(427,123,427),(428,124,428),(429,124,429),(430,124,430),(431,124,431),(432,124,432),(433,125,433),(434,125,434),(435,125,435),(436,125,436),(437,125,437),(438,126,438),(439,126,439),(440,126,440),(441,126,441),(442,126,442),(443,127,443),(444,127,444),(445,127,445),(446,127,446),(447,127,447),(448,128,448),(449,128,449),(450,130,451),(451,130,452),(452,130,453),(453,130,454),(454,130,455),(455,129,450),(456,129,456),(457,131,457),(458,131,459),(459,131,460),(460,131,461),(461,131,462),(462,132,458),(463,132,463),(464,133,464),(465,133,465),(466,134,466),(467,134,467),(468,135,468),(469,135,469),(470,136,470),(471,136,471),(472,137,472),(473,137,473),(474,138,474),(475,138,475),(476,139,476),(477,139,477),(478,140,478),(479,140,479),(480,140,480),(481,140,481),(482,141,482),(483,141,483),(484,141,484),(485,141,485),(486,142,486),(487,142,487),(488,142,488),(489,142,489),(490,143,490),(491,143,491),(492,143,492),(493,143,493),(494,144,494),(495,144,495),(496,144,496),(497,144,497),(498,145,498),(499,145,499),(500,145,500),(501,145,501),(502,146,502),(503,146,503),(504,146,504),(505,146,505),(506,147,506),(507,147,507),(508,147,508),(509,147,509),(510,148,510),(511,148,511),(512,148,512),(513,148,513),(514,149,514),(515,149,515),(516,149,516),(517,149,517),(518,150,518),(519,150,519),(520,150,520),(521,150,521),(522,150,522),(523,151,523),(524,151,524),(525,151,525),(526,151,526),(527,151,527),(528,152,528),(529,152,529),(530,152,530),(531,152,531),(532,152,532),(533,153,533),(534,153,534),(535,153,535),(536,153,536),(537,153,537),(538,154,538),(539,154,539),(540,154,540),(541,154,541),(542,154,542),(543,155,543),(544,155,544),(545,155,545),(546,155,546),(547,155,547),(548,156,548),(549,156,549),(550,156,550),(551,156,551),(552,156,552),(553,157,553),(554,157,554),(555,157,555),(556,157,556),(557,157,557),(558,158,558),(559,158,559),(560,158,560),(561,158,561),(562,158,562);
/*!40000 ALTER TABLE `question_option` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `quiz`
--

DROP TABLE IF EXISTS `quiz`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `quiz` (
  `quiz_id` int NOT NULL AUTO_INCREMENT,
  `quiz_name` varchar(255) NOT NULL,
  `quiz_is_active` tinyint(1) NOT NULL DEFAULT '1',
  PRIMARY KEY (`quiz_id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `quiz`
--

LOCK TABLES `quiz` WRITE;
/*!40000 ALTER TABLE `quiz` DISABLE KEYS */;
INSERT INTO `quiz` VALUES (1,'poihg',1),(2,'POO',1),(3,'DP',1),(4,'PE',1);
/*!40000 ALTER TABLE `quiz` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `quiz_img`
--

DROP TABLE IF EXISTS `quiz_img`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `quiz_img` (
  `img_id` int NOT NULL AUTO_INCREMENT,
  `quiz_id` int NOT NULL,
  `img` varchar(255) NOT NULL,
  PRIMARY KEY (`img_id`),
  KEY `fk_quiz_id` (`quiz_id`),
  CONSTRAINT `fk_quiz` FOREIGN KEY (`quiz_id`) REFERENCES `quiz` (`quiz_id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `quiz_img`
--

LOCK TABLES `quiz_img` WRITE;
/*!40000 ALTER TABLE `quiz_img` DISABLE KEYS */;
/*!40000 ALTER TABLE `quiz_img` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `quiz_issue`
--

DROP TABLE IF EXISTS `quiz_issue`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `quiz_issue` (
  `quiz_issue_id` int NOT NULL AUTO_INCREMENT,
  `quiz_issue_description` text NOT NULL,
  `quiz_issue_date_reported` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `quiz_issue_is_fixed` tinyint(1) NOT NULL,
  PRIMARY KEY (`quiz_issue_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `quiz_issue`
--

LOCK TABLES `quiz_issue` WRITE;
/*!40000 ALTER TABLE `quiz_issue` DISABLE KEYS */;
/*!40000 ALTER TABLE `quiz_issue` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `quiz_question`
--

DROP TABLE IF EXISTS `quiz_question`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `quiz_question` (
  `quiz_question_id` int NOT NULL AUTO_INCREMENT,
  `quiz_id` int DEFAULT NULL,
  `question_id` int DEFAULT NULL,
  PRIMARY KEY (`quiz_question_id`),
  KEY `idx_quiz_id` (`quiz_id`),
  KEY `idx_question_id` (`question_id`),
  CONSTRAINT `quiz_question_ibfk_1` FOREIGN KEY (`quiz_id`) REFERENCES `quiz` (`quiz_id`),
  CONSTRAINT `quiz_question_ibfk_2` FOREIGN KEY (`question_id`) REFERENCES `question` (`question_id`)
) ENGINE=InnoDB AUTO_INCREMENT=159 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `quiz_question`
--

LOCK TABLES `quiz_question` WRITE;
/*!40000 ALTER TABLE `quiz_question` DISABLE KEYS */;
INSERT INTO `quiz_question` VALUES (1,2,1),(2,2,2),(3,2,3),(4,2,4),(5,2,5),(6,2,6),(7,2,7),(8,2,8),(9,2,9),(10,2,10),(11,2,11),(12,2,12),(13,2,13),(14,2,14),(15,2,15),(16,2,16),(17,2,17),(18,2,18),(19,2,19),(20,2,20),(21,2,21),(22,2,22),(23,2,23),(24,2,24),(25,2,25),(26,2,26),(27,2,27),(28,3,28),(29,3,29),(30,3,30),(31,3,31),(32,3,32),(33,3,33),(34,3,34),(35,3,35),(36,2,36),(37,3,37),(38,2,38),(39,2,39),(40,3,40),(41,2,41),(42,3,42),(43,2,43),(44,3,44),(45,2,45),(46,3,46),(47,2,47),(48,3,48),(49,2,49),(50,3,50),(51,2,51),(52,3,52),(53,2,53),(54,3,54),(55,2,55),(56,2,56),(57,3,57),(58,2,58),(59,3,59),(60,2,60),(61,3,61),(62,2,62),(63,3,63),(64,2,64),(65,2,65),(66,3,66),(67,2,67),(68,3,68),(69,2,69),(70,2,71),(71,4,70),(72,2,72),(73,4,73),(74,2,74),(75,4,75),(76,2,76),(77,2,77),(78,4,78),(79,2,79),(80,4,80),(81,2,81),(82,4,82),(83,2,83),(84,3,84),(85,4,85),(86,3,86),(87,4,87),(88,3,88),(89,4,89),(90,3,90),(91,4,91),(92,3,92),(93,4,93),(94,3,94),(95,4,95),(96,3,96),(97,4,97),(98,3,98),(99,4,99),(100,3,100),(101,4,101),(102,3,102),(103,3,104),(104,4,103),(105,3,105),(106,4,106),(107,3,107),(108,4,108),(109,3,109),(110,4,110),(111,3,111),(112,4,112),(113,3,113),(114,3,115),(115,4,114),(116,3,116),(117,4,117),(118,3,118),(119,4,119),(120,3,120),(121,4,121),(122,3,122),(123,4,123),(124,3,124),(125,4,125),(126,3,126),(127,4,127),(128,4,128),(129,4,130),(130,4,129),(131,4,131),(132,4,132),(133,4,133),(134,4,134),(135,4,135),(136,4,136),(137,4,137),(138,4,138),(139,4,139),(140,4,140),(141,4,141),(142,4,142),(143,4,143),(144,4,144),(145,4,145),(146,4,146),(147,4,147),(148,4,148),(149,4,149),(150,4,150),(151,4,151),(152,4,152),(153,4,153),(154,4,154),(155,4,155),(156,4,156),(157,4,157),(158,4,158);
/*!40000 ALTER TABLE `quiz_question` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `quiz_session`
--

DROP TABLE IF EXISTS `quiz_session`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `quiz_session` (
  `quiz_session_id` int NOT NULL AUTO_INCREMENT,
  `quiz_session_score` int NOT NULL,
  `quiz_session_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`quiz_session_id`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `quiz_session`
--

LOCK TABLES `quiz_session` WRITE;
/*!40000 ALTER TABLE `quiz_session` DISABLE KEYS */;
INSERT INTO `quiz_session` VALUES (1,15,'2024-03-14 12:46:14'),(2,25,'2024-03-14 12:46:54'),(3,25,'2024-03-14 12:47:11'),(4,25,'2024-03-14 12:47:15'),(5,35,'2024-03-14 12:48:04'),(6,35,'2024-03-14 12:49:27'),(7,35,'2024-03-14 12:49:29');
/*!40000 ALTER TABLE `quiz_session` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `quiz_tracker`
--

DROP TABLE IF EXISTS `quiz_tracker`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `quiz_tracker` (
  `quiz_tracker_id` int NOT NULL AUTO_INCREMENT,
  `user_quiz_id` int DEFAULT NULL,
  `quiz_session_id` int DEFAULT NULL,
  `quiz_id` int DEFAULT NULL,
  PRIMARY KEY (`quiz_tracker_id`),
  KEY `idx_user_quiz_id` (`user_quiz_id`),
  KEY `idx_quiz_session_id` (`quiz_session_id`),
  KEY `idx_quiz_id` (`quiz_id`),
  CONSTRAINT `quiz_tracker_ibfk_1` FOREIGN KEY (`user_quiz_id`) REFERENCES `user_quiz` (`user_quiz_id`),
  CONSTRAINT `quiz_tracker_ibfk_2` FOREIGN KEY (`quiz_session_id`) REFERENCES `quiz_session` (`quiz_session_id`),
  CONSTRAINT `quiz_tracker_ibfk_3` FOREIGN KEY (`quiz_id`) REFERENCES `quiz` (`quiz_id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `quiz_tracker`
--

LOCK TABLES `quiz_tracker` WRITE;
/*!40000 ALTER TABLE `quiz_tracker` DISABLE KEYS */;
INSERT INTO `quiz_tracker` VALUES (1,2,4,2),(2,2,7,3);
/*!40000 ALTER TABLE `quiz_tracker` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user_issue`
--

DROP TABLE IF EXISTS `user_issue`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `user_issue` (
  `user_issue_id` int NOT NULL AUTO_INCREMENT,
  `quiz_issue_id` int DEFAULT NULL,
  `user_quiz_id` int DEFAULT NULL,
  PRIMARY KEY (`user_issue_id`),
  KEY `quiz_issue_id` (`quiz_issue_id`),
  KEY `user_quiz_id` (`user_quiz_id`),
  CONSTRAINT `user_issue_ibfk_1` FOREIGN KEY (`quiz_issue_id`) REFERENCES `quiz_issue` (`quiz_issue_id`),
  CONSTRAINT `user_issue_ibfk_2` FOREIGN KEY (`user_quiz_id`) REFERENCES `user_quiz` (`user_quiz_id`) ON DELETE SET NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user_issue`
--

LOCK TABLES `user_issue` WRITE;
/*!40000 ALTER TABLE `user_issue` DISABLE KEYS */;
/*!40000 ALTER TABLE `user_issue` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user_quiz`
--

DROP TABLE IF EXISTS `user_quiz`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `user_quiz` (
  `user_quiz_id` int NOT NULL AUTO_INCREMENT,
  `user_quiz_username` varchar(255) NOT NULL,
  `user_quiz_password` varchar(64) NOT NULL,
  `user_quiz_email` varchar(255) NOT NULL,
  `user_quiz_is_admin` tinyint(1) NOT NULL,
  `user_quiz_is_active` tinyint(1) NOT NULL DEFAULT '1',
  PRIMARY KEY (`user_quiz_id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user_quiz`
--

LOCK TABLES `user_quiz` WRITE;
/*!40000 ALTER TABLE `user_quiz` DISABLE KEYS */;
INSERT INTO `user_quiz` VALUES (1,'Murielle','798310d064b617c365e65f26d96c6ab336a43bc0adf41ac7e207d0791e8c7feb','murielleflora35@gmail.com',1,1),(2,'user','04f8996da763b7a969b1028ee3007569eaf3a635486ddab211d512c85b9df8fb','user@user.com',0,1),(3,'admin','8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918','admin@admin.com',1,1);
/*!40000 ALTER TABLE `user_quiz` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2024-03-21  0:25:10
